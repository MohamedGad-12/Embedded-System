
unit6_lesson3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000320  08000328  00010328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000320  08000320  00010328  2**0
                  CONTENTS
  4 .ARM          00000000  08000320  08000320  00010328  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000320  08000328  00010328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000320  08000320  00010320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000324  08000324  00010324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000328  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000328  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010328  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000938  00000000  00000000  00010351  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001c3  00000000  00000000  00010c89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000058  00000000  00000000  00010e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000040  00000000  00000000  00010ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001d0e  00000000  00000000  00010ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000661  00000000  00000000  00012bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00007fec  00000000  00000000  00013257  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001b243  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000009c  00000000  00000000  0001b2c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000308 	.word	0x08000308

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000308 	.word	0x08000308

08000170 <Clock_Init>:
#define GPIOA_BASE 0x40010800
#define GPIOA_CRH *(volatile uint32_t *)(GPIOA_BASE + 0x04)
#define GPIOA_ODR *(volatile uint32_t *)(GPIOA_BASE + 0x0C)


void Clock_Init(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	Bit 2 IOPAEN: I/O port A clock enable
	Set and cleared by software.
	0: I/O port A clock disabled
	1:I/O port A clock enabled
	 */
	RCC_APB2ENR |= (1 << 2) ;
 8000174:	4b1a      	ldr	r3, [pc, #104]	; (80001e0 <Clock_Init+0x70>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a19      	ldr	r2, [pc, #100]	; (80001e0 <Clock_Init+0x70>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]
	system clock. This bit can not be cleared if the internal 8 MHz RC is used directly or
	indirectly as system clock or is selected to become the system clock.
	0: Internal 8 MHz RC oscillator OFF
	1: Internal 8 MHz RC oscillator ON
	 */
	RCC_CR |= (1 << 0) ;
 8000180:	4b18      	ldr	r3, [pc, #96]	; (80001e4 <Clock_Init+0x74>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a17      	ldr	r2, [pc, #92]	; (80001e4 <Clock_Init+0x74>)
 8000186:	f043 0301 	orr.w	r3, r3, #1
 800018a:	6013      	str	r3, [r2, #0]
	Set and cleared by software to select PLL clock source.
	This bit can be written only when PLL is disabled.
	0: HSI oscillator clock / 2 selected as PLL input clock
	1: HSE oscillator clock selected as PLL input clock
	 */
	RCC_CFGR |= (0 << 16);
 800018c:	4b16      	ldr	r3, [pc, #88]	; (80001e8 <Clock_Init+0x78>)
 800018e:	4a16      	ldr	r2, [pc, #88]	; (80001e8 <Clock_Init+0x78>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	6013      	str	r3, [r2, #0]
	00: HSI selected as system clock
	01: HSE selected as system clock
	10: PLL selected as system clock
	11: not allowed
	 */
	RCC_CFGR |= (0b10 << 0);
 8000194:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <Clock_Init+0x78>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a13      	ldr	r2, [pc, #76]	; (80001e8 <Clock_Init+0x78>)
 800019a:	f043 0302 	orr.w	r3, r3, #2
 800019e:	6013      	str	r3, [r2, #0]
	1100: PLL input clock x 14
	1101: PLL input clock x 15
	1110: PLL input clock x 16
	1111: PLL input clock x 16
	 */
	RCC_CFGR |= (0b0110 << 18);
 80001a0:	4b11      	ldr	r3, [pc, #68]	; (80001e8 <Clock_Init+0x78>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a10      	ldr	r2, [pc, #64]	; (80001e8 <Clock_Init+0x78>)
 80001a6:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 80001aa:	6013      	str	r3, [r2, #0]
	1110: SYSCLK divided by 256
	1111: SYSCLK divided by 512
	Note: The prefetch buffer must be kept on when using a prescaler different from 1 on the
	AHB clock. Refer to Reading the Flash memory section for more details
	 */
	RCC_CFGR |= (0b0000 << 4);
 80001ac:	4b0e      	ldr	r3, [pc, #56]	; (80001e8 <Clock_Init+0x78>)
 80001ae:	4a0e      	ldr	r2, [pc, #56]	; (80001e8 <Clock_Init+0x78>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	6013      	str	r3, [r2, #0]
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16
	 */
	RCC_CFGR |= (0b100 << 8);
 80001b4:	4b0c      	ldr	r3, [pc, #48]	; (80001e8 <Clock_Init+0x78>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a0b      	ldr	r2, [pc, #44]	; (80001e8 <Clock_Init+0x78>)
 80001ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001be:	6013      	str	r3, [r2, #0]
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16
	 */
	RCC_CFGR |= (0b101 << 11);
 80001c0:	4b09      	ldr	r3, [pc, #36]	; (80001e8 <Clock_Init+0x78>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a08      	ldr	r2, [pc, #32]	; (80001e8 <Clock_Init+0x78>)
 80001c6:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80001ca:	6013      	str	r3, [r2, #0]
	Cleared by hardware when entering Stop or Standby mode. This bit can not be reset if the
	PLL clock is used as system clock or is selected to become the system clock.
	0: PLL OFF
	1: PLL ON
	 */
	RCC_CR |= (1 << 24) ;
 80001cc:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <Clock_Init+0x74>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <Clock_Init+0x74>)
 80001d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001d6:	6013      	str	r3, [r2, #0]
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr
 80001e0:	40021018 	.word	0x40021018
 80001e4:	40021000 	.word	0x40021000
 80001e8:	40021004 	.word	0x40021004

080001ec <GPIOA_Init>:

void GPIOA_Init() {
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	//Init GPIOA
	GPIOA_CRH &= 0xFF0FFFFF;
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <GPIOA_Init+0x24>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a06      	ldr	r2, [pc, #24]	; (8000210 <GPIOA_Init+0x24>)
 80001f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001fa:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x00200000;
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <GPIOA_Init+0x24>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a03      	ldr	r2, [pc, #12]	; (8000210 <GPIOA_Init+0x24>)
 8000202:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000206:	6013      	str	r3, [r2, #0]
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	40010804 	.word	0x40010804

08000214 <main>:

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0

	Clock_Init();
 800021a:	f7ff ffa9 	bl	8000170 <Clock_Init>
	GPIOA_Init();
 800021e:	f7ff ffe5 	bl	80001ec <GPIOA_Init>

	while(1)
	{
		GPIOA_ODR |= 1<<13 ;
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <main+0x54>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a10      	ldr	r2, [pc, #64]	; (8000268 <main+0x54>)
 8000228:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800022c:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 5000; i++); // arbitrary delay
 800022e:	2300      	movs	r3, #0
 8000230:	607b      	str	r3, [r7, #4]
 8000232:	e002      	b.n	800023a <main+0x26>
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3301      	adds	r3, #1
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000240:	4293      	cmp	r3, r2
 8000242:	ddf7      	ble.n	8000234 <main+0x20>
		GPIOA_ODR &= ~(1<<13) ;
 8000244:	4b08      	ldr	r3, [pc, #32]	; (8000268 <main+0x54>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a07      	ldr	r2, [pc, #28]	; (8000268 <main+0x54>)
 800024a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800024e:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 5000; i++); // arbitrary delay
 8000250:	2300      	movs	r3, #0
 8000252:	603b      	str	r3, [r7, #0]
 8000254:	e002      	b.n	800025c <main+0x48>
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	3301      	adds	r3, #1
 800025a:	603b      	str	r3, [r7, #0]
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000262:	4293      	cmp	r3, r2
 8000264:	ddf7      	ble.n	8000256 <main+0x42>
		GPIOA_ODR |= 1<<13 ;
 8000266:	e7dc      	b.n	8000222 <main+0xe>
 8000268:	4001080c 	.word	0x4001080c

0800026c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800026e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000270:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000274:	480c      	ldr	r0, [pc, #48]	; (80002a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000276:	490d      	ldr	r1, [pc, #52]	; (80002ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000278:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <LoopForever+0xe>)
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800027c:	e002      	b.n	8000284 <LoopCopyDataInit>

0800027e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000282:	3304      	adds	r3, #4

08000284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000288:	d3f9      	bcc.n	800027e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028a:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800028c:	4c0a      	ldr	r4, [pc, #40]	; (80002b8 <LoopForever+0x16>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000290:	e001      	b.n	8000296 <LoopFillZerobss>

08000292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000294:	3204      	adds	r2, #4

08000296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000298:	d3fb      	bcc.n	8000292 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800029a:	f000 f811 	bl	80002c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800029e:	f7ff ffb9 	bl	8000214 <main>

080002a2 <LoopForever>:

LoopForever:
    b LoopForever
 80002a2:	e7fe      	b.n	80002a2 <LoopForever>
  ldr   r0, =_estack
 80002a4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b0:	08000328 	.word	0x08000328
  ldr r2, =_sbss
 80002b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b8:	2000001c 	.word	0x2000001c

080002bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002bc:	e7fe      	b.n	80002bc <ADC1_2_IRQHandler>
	...

080002c0 <__libc_init_array>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	2500      	movs	r5, #0
 80002c4:	4e0c      	ldr	r6, [pc, #48]	; (80002f8 <__libc_init_array+0x38>)
 80002c6:	4c0d      	ldr	r4, [pc, #52]	; (80002fc <__libc_init_array+0x3c>)
 80002c8:	1ba4      	subs	r4, r4, r6
 80002ca:	10a4      	asrs	r4, r4, #2
 80002cc:	42a5      	cmp	r5, r4
 80002ce:	d109      	bne.n	80002e4 <__libc_init_array+0x24>
 80002d0:	f000 f81a 	bl	8000308 <_init>
 80002d4:	2500      	movs	r5, #0
 80002d6:	4e0a      	ldr	r6, [pc, #40]	; (8000300 <__libc_init_array+0x40>)
 80002d8:	4c0a      	ldr	r4, [pc, #40]	; (8000304 <__libc_init_array+0x44>)
 80002da:	1ba4      	subs	r4, r4, r6
 80002dc:	10a4      	asrs	r4, r4, #2
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d105      	bne.n	80002ee <__libc_init_array+0x2e>
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002e8:	4798      	blx	r3
 80002ea:	3501      	adds	r5, #1
 80002ec:	e7ee      	b.n	80002cc <__libc_init_array+0xc>
 80002ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002f2:	4798      	blx	r3
 80002f4:	3501      	adds	r5, #1
 80002f6:	e7f2      	b.n	80002de <__libc_init_array+0x1e>
 80002f8:	08000320 	.word	0x08000320
 80002fc:	08000320 	.word	0x08000320
 8000300:	08000320 	.word	0x08000320
 8000304:	08000324 	.word	0x08000324

08000308 <_init>:
 8000308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030a:	bf00      	nop
 800030c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030e:	bc08      	pop	{r3}
 8000310:	469e      	mov	lr, r3
 8000312:	4770      	bx	lr

08000314 <_fini>:
 8000314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000316:	bf00      	nop
 8000318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031a:	bc08      	pop	{r3}
 800031c:	469e      	mov	lr, r3
 800031e:	4770      	bx	lr
