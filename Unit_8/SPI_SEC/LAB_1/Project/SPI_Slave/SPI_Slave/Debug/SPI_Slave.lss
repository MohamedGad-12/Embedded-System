
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000000e4  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000687  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e3  00000000  00000000  00000893  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  00000e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000356  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fe  00000000  00000000  000014be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  7a:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <SPI_Slave_INIT>:
	
	
										
void SPI_Slave_INIT(){
		
	SET_BIT(DDRB,1,MISO);	
  82:	be 9a       	sbi	0x17, 6	; 23
		
	RESET_BIT(DDRB,1,MOSI);
  84:	bd 98       	cbi	0x17, 5	; 23
	RESET_BIT(DDRB,1,SCK);
  86:	bf 98       	cbi	0x17, 7	; 23
	RESET_BIT(DDRB,1,SS);
  88:	bc 98       	cbi	0x17, 4	; 23
	
	
	SPCR = (1<<SPE);
  8a:	80 e4       	ldi	r24, 0x40	; 64
  8c:	8d b9       	out	0x0d, r24	; 13
  8e:	08 95       	ret

00000090 <Slave_Rec>:
	 RESET_BIT(SPCR,1,MSTR);*/
}

unsigned char Slave_Rec (unsigned char Data) {
	
	SPDR = Data;
  90:	8f b9       	out	0x0f, r24	; 15
	while(!(READ_BIT(SPSR,1,SPIF)));
  92:	77 9b       	sbis	0x0e, 7	; 14
  94:	fe cf       	rjmp	.-4      	; 0x92 <Slave_Rec+0x2>
	return SPDR;
  96:	8f b1       	in	r24, 0x0f	; 15
	
}
  98:	08 95       	ret

0000009a <main>:

int main(void)
{
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
	unsigned char count = 0;
	DDRA = 0xFF;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	8a bb       	out	0x1a, r24	; 26
	SPI_Slave_INIT();
  a6:	0e 94 41 00 	call	0x82	; 0x82 <SPI_Slave_INIT>
  aa:	c0 e6       	ldi	r28, 0x60	; 96
  ac:	d0 e0       	ldi	r29, 0x00	; 0
  ae:	05 e7       	ldi	r16, 0x75	; 117
  b0:	10 e0       	ldi	r17, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f e3       	ldi	r18, 0x3F	; 63
  b4:	8d e0       	ldi	r24, 0x0D	; 13
  b6:	93 e0       	ldi	r25, 0x03	; 3
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x1e>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x28>
  c2:	00 00       	nop
	
	for (count = 0  ; count <= 20 ; count++)
	{
		_delay_ms(1000);
		PORTA = Slave_Rec(seven_segment[count]);
  c4:	89 91       	ld	r24, Y+
  c6:	0e 94 48 00 	call	0x90	; 0x90 <Slave_Rec>
  ca:	8b bb       	out	0x1b, r24	; 27
{
	unsigned char count = 0;
	DDRA = 0xFF;
	SPI_Slave_INIT();
	
	for (count = 0  ; count <= 20 ; count++)
  cc:	c0 17       	cp	r28, r16
  ce:	d1 07       	cpc	r29, r17
  d0:	81 f7       	brne	.-32     	; 0xb2 <main+0x18>
	{
		_delay_ms(1000);
		PORTA = Slave_Rec(seven_segment[count]);
	}
}
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	0f 91       	pop	r16
  de:	08 95       	ret

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
