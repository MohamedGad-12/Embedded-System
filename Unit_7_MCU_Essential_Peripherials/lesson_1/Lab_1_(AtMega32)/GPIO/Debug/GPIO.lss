
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000686  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  0000083a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c1  00000000  00000000  00000e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000010d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000313  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bd  00000000  00000000  00001427  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 40 00 	call	0x80	; 0x80 <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init>:

	SET_BIT(SFIOR,1,2);
}

void wait(unsigned int t)
{
  6c:	d1 98       	cbi	0x1a, 1	; 26
  6e:	d9 98       	cbi	0x1b, 1	; 27
  70:	b9 9a       	sbi	0x17, 1	; 23
  72:	d7 98       	cbi	0x1a, 7	; 26
  74:	df 98       	cbi	0x1b, 7	; 27
  76:	bf 9a       	sbi	0x17, 7	; 23
  78:	80 b7       	in	r24, 0x30	; 48
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	80 bf       	out	0x30, r24	; 48
  7e:	08 95       	ret

00000080 <main>:
		for( j = 0; j < 255 ; j++);
}

int main(void)
{
	init ();
  80:	0e 94 36 00 	call	0x6c	; 0x6c <init>
	
	while(1){

		if ( READ_BIT(PINA,1,1) == 0) {
			TOGGLE_BIT(PORTB,1,1);
  84:	92 e0       	ldi	r25, 0x02	; 2
{
	init ();
	
	while(1){

		if ( READ_BIT(PINA,1,1) == 0) {
  86:	c9 99       	sbic	0x19, 1	; 25
  88:	05 c0       	rjmp	.+10     	; 0x94 <main+0x14>
			TOGGLE_BIT(PORTB,1,1);
  8a:	88 b3       	in	r24, 0x18	; 24
  8c:	89 27       	eor	r24, r25
  8e:	88 bb       	out	0x18, r24	; 24
			while ( READ_BIT(PINA,1,1) == 0);
  90:	c9 9b       	sbis	0x19, 1	; 25
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0x10>
		}

		if ( READ_BIT(PINA,1,7) == 1) {
  94:	cf 9b       	sbis	0x19, 7	; 25
  96:	0c c0       	rjmp	.+24     	; 0xb0 <main+0x30>
			TOGGLE_BIT(PORTB,1,7); 
  98:	88 b3       	in	r24, 0x18	; 24
  9a:	80 58       	subi	r24, 0x80	; 128
  9c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f e7       	ldi	r18, 0x7F	; 127
  a0:	38 e3       	ldi	r19, 0x38	; 56
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x24>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x2e>
  ae:	00 00       	nop
  b0:	ef e1       	ldi	r30, 0x1F	; 31
  b2:	fe e4       	ldi	r31, 0x4E	; 78
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x34>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x3a>
  ba:	00 00       	nop
  bc:	e4 cf       	rjmp	.-56     	; 0x86 <main+0x6>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
