
Gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000204  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000334  0800033c  0001033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000334  08000334  0001033c  2**0
                  CONTENTS
  4 .ARM          00000000  08000334  08000334  0001033c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000334  0800033c  0001033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000334  08000334  00010334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000338  08000338  00010338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800033c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800033c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a39  00000000  00000000  00010365  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001c9  00000000  00000000  00010d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000110  00000000  00000000  00010f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000060  00000000  00000000  00011078  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000048  00000000  00000000  000110d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001d38  00000000  00000000  00011120  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000669  00000000  00000000  00012e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008111  00000000  00000000  000134c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001b5d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c0  00000000  00000000  0001b650  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800031c 	.word	0x0800031c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800031c 	.word	0x0800031c

08000170 <clock_init>:
#define GPIOB_IDR		*(volatile uint32_t*)(GPIOB_BASE + 0x08)



void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Bit 2 IOPAEN: I/O port A clock enable
	RCC_APB2ENR |= RCC_IOPAEN;
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]

	//Bit 3 IOPBEN: I/O port B clock enable
	RCC_APB2ENR |= RCC_IOPBEN;
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6013      	str	r3, [r2, #0]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021018 	.word	0x40021018

08000198 <Gpio_init>:


void Gpio_init()
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	// by default pinA1 has correct configuration

	//pinB1 as an output push-pull
	GPIOB_CRL |= (0b0010 << 4);
 800019c:	4b10      	ldr	r3, [pc, #64]	; (80001e0 <Gpio_init+0x48>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a0f      	ldr	r2, [pc, #60]	; (80001e0 <Gpio_init+0x48>)
 80001a2:	f043 0320 	orr.w	r3, r3, #32
 80001a6:	6013      	str	r3, [r2, #0]

	//pinA13 input
	GPIOA_CRH   &= 0xFF0FFFFF;
 80001a8:	4b0e      	ldr	r3, [pc, #56]	; (80001e4 <Gpio_init+0x4c>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a0d      	ldr	r2, [pc, #52]	; (80001e4 <Gpio_init+0x4c>)
 80001ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001b2:	6013      	str	r3, [r2, #0]
	GPIOA_CRH   |= 0x00400000;
 80001b4:	4b0b      	ldr	r3, [pc, #44]	; (80001e4 <Gpio_init+0x4c>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a0a      	ldr	r2, [pc, #40]	; (80001e4 <Gpio_init+0x4c>)
 80001ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001be:	6013      	str	r3, [r2, #0]

	//pinB13 output
	GPIOB_CRH   &= 0xFF0FFFFF;
 80001c0:	4b09      	ldr	r3, [pc, #36]	; (80001e8 <Gpio_init+0x50>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a08      	ldr	r2, [pc, #32]	; (80001e8 <Gpio_init+0x50>)
 80001c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001ca:	6013      	str	r3, [r2, #0]
	GPIOB_CRH   |= 0x00200000;
 80001cc:	4b06      	ldr	r3, [pc, #24]	; (80001e8 <Gpio_init+0x50>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a05      	ldr	r2, [pc, #20]	; (80001e8 <Gpio_init+0x50>)
 80001d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001d6:	6013      	str	r3, [r2, #0]

}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr
 80001e0:	40010c00 	.word	0x40010c00
 80001e4:	40010804 	.word	0x40010804
 80001e8:	40010c04 	.word	0x40010c04

080001ec <wait>:

void wait (unsigned int t) {
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]

	unsigned int i,j;
	for(i = 0 ; i < t ; i++)
 80001f4:	2300      	movs	r3, #0
 80001f6:	60fb      	str	r3, [r7, #12]
 80001f8:	e00b      	b.n	8000212 <wait+0x26>
		for(j = 0 ; j < 255 ; j++);
 80001fa:	2300      	movs	r3, #0
 80001fc:	60bb      	str	r3, [r7, #8]
 80001fe:	e002      	b.n	8000206 <wait+0x1a>
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	3301      	adds	r3, #1
 8000204:	60bb      	str	r3, [r7, #8]
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	2bfe      	cmp	r3, #254	; 0xfe
 800020a:	d9f9      	bls.n	8000200 <wait+0x14>
	for(i = 0 ; i < t ; i++)
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	3301      	adds	r3, #1
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	68fa      	ldr	r2, [r7, #12]
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	429a      	cmp	r2, r3
 8000218:	d3ef      	bcc.n	80001fa <wait+0xe>
}
 800021a:	bf00      	nop
 800021c:	3714      	adds	r7, #20
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr

08000224 <main>:


int main(void) {
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0

	clock_init();
 8000228:	f7ff ffa2 	bl	8000170 <clock_init>
	Gpio_init();
 800022c:	f7ff ffb4 	bl	8000198 <Gpio_init>

	while(1){

		if (((GPIOA_IDR & (1<<1)) >> 1) == 0) {
 8000230:	4b11      	ldr	r3, [pc, #68]	; (8000278 <main+0x54>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f003 0302 	and.w	r3, r3, #2
 8000238:	2b00      	cmp	r3, #0
 800023a:	d10c      	bne.n	8000256 <main+0x32>

			GPIOB_ODR ^= 1<<1 ;
 800023c:	4b0f      	ldr	r3, [pc, #60]	; (800027c <main+0x58>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a0e      	ldr	r2, [pc, #56]	; (800027c <main+0x58>)
 8000242:	f083 0302 	eor.w	r3, r3, #2
 8000246:	6013      	str	r3, [r2, #0]
			while (((GPIOA_IDR & (1<<1)) >> 1) == 0);
 8000248:	bf00      	nop
 800024a:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <main+0x54>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f003 0302 	and.w	r3, r3, #2
 8000252:	2b00      	cmp	r3, #0
 8000254:	d0f9      	beq.n	800024a <main+0x26>
		}


		if (((GPIOA_IDR & (1<<13)) >> 13) == 1) {
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <main+0x54>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	0b5b      	lsrs	r3, r3, #13
 800025c:	f003 0301 	and.w	r3, r3, #1
 8000260:	2b01      	cmp	r3, #1
 8000262:	d105      	bne.n	8000270 <main+0x4c>

			GPIOB_ODR ^= 1<<13 ;
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <main+0x58>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a04      	ldr	r2, [pc, #16]	; (800027c <main+0x58>)
 800026a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800026e:	6013      	str	r3, [r2, #0]

		}
		wait(1);
 8000270:	2001      	movs	r0, #1
 8000272:	f7ff ffbb 	bl	80001ec <wait>
		if (((GPIOA_IDR & (1<<1)) >> 1) == 0) {
 8000276:	e7db      	b.n	8000230 <main+0xc>
 8000278:	40010808 	.word	0x40010808
 800027c:	40010c0c 	.word	0x40010c0c

08000280 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000282:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000284:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000288:	480c      	ldr	r0, [pc, #48]	; (80002bc <LoopForever+0x6>)
  ldr r1, =_edata
 800028a:	490d      	ldr	r1, [pc, #52]	; (80002c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800028c:	4a0d      	ldr	r2, [pc, #52]	; (80002c4 <LoopForever+0xe>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000290:	e002      	b.n	8000298 <LoopCopyDataInit>

08000292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000296:	3304      	adds	r3, #4

08000298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800029c:	d3f9      	bcc.n	8000292 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029e:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a0:	4c0a      	ldr	r4, [pc, #40]	; (80002cc <LoopForever+0x16>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a4:	e001      	b.n	80002aa <LoopFillZerobss>

080002a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a8:	3204      	adds	r2, #4

080002aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ac:	d3fb      	bcc.n	80002a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ae:	f000 f811 	bl	80002d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b2:	f7ff ffb7 	bl	8000224 <main>

080002b6 <LoopForever>:

LoopForever:
    b LoopForever
 80002b6:	e7fe      	b.n	80002b6 <LoopForever>
  ldr   r0, =_estack
 80002b8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c4:	0800033c 	.word	0x0800033c
  ldr r2, =_sbss
 80002c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002cc:	2000001c 	.word	0x2000001c

080002d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d0:	e7fe      	b.n	80002d0 <ADC1_2_IRQHandler>
	...

080002d4 <__libc_init_array>:
 80002d4:	b570      	push	{r4, r5, r6, lr}
 80002d6:	2500      	movs	r5, #0
 80002d8:	4e0c      	ldr	r6, [pc, #48]	; (800030c <__libc_init_array+0x38>)
 80002da:	4c0d      	ldr	r4, [pc, #52]	; (8000310 <__libc_init_array+0x3c>)
 80002dc:	1ba4      	subs	r4, r4, r6
 80002de:	10a4      	asrs	r4, r4, #2
 80002e0:	42a5      	cmp	r5, r4
 80002e2:	d109      	bne.n	80002f8 <__libc_init_array+0x24>
 80002e4:	f000 f81a 	bl	800031c <_init>
 80002e8:	2500      	movs	r5, #0
 80002ea:	4e0a      	ldr	r6, [pc, #40]	; (8000314 <__libc_init_array+0x40>)
 80002ec:	4c0a      	ldr	r4, [pc, #40]	; (8000318 <__libc_init_array+0x44>)
 80002ee:	1ba4      	subs	r4, r4, r6
 80002f0:	10a4      	asrs	r4, r4, #2
 80002f2:	42a5      	cmp	r5, r4
 80002f4:	d105      	bne.n	8000302 <__libc_init_array+0x2e>
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002fc:	4798      	blx	r3
 80002fe:	3501      	adds	r5, #1
 8000300:	e7ee      	b.n	80002e0 <__libc_init_array+0xc>
 8000302:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000306:	4798      	blx	r3
 8000308:	3501      	adds	r5, #1
 800030a:	e7f2      	b.n	80002f2 <__libc_init_array+0x1e>
 800030c:	08000334 	.word	0x08000334
 8000310:	08000334 	.word	0x08000334
 8000314:	08000334 	.word	0x08000334
 8000318:	08000338 	.word	0x08000338

0800031c <_init>:
 800031c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031e:	bf00      	nop
 8000320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000322:	bc08      	pop	{r3}
 8000324:	469e      	mov	lr, r3
 8000326:	4770      	bx	lr

08000328 <_fini>:
 8000328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032a:	bf00      	nop
 800032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032e:	bc08      	pop	{r3}
 8000330:	469e      	mov	lr, r3
 8000332:	4770      	bx	lr
