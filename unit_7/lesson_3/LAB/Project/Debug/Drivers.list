
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e38  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08000f68  08000f68  00010f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010a8  080010a8  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  080010a8  080010a8  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010a8  080010a8  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010a8  080010a8  000110a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010ac  080010ac  000110ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080010b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  200001fc  080012ac  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080012ac  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031dd  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000833  00000000  00000000  00023402  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000861  00000000  00000000  00023c35  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000168  00000000  00000000  00024498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000120  00000000  00000000  00024600  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002096  00000000  00000000  00024720  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001dea  00000000  00000000  000267b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008dbf  00000000  00000000  000285a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003135f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000067c  00000000  00000000  000313dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001fc 	.word	0x200001fc
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f50 	.word	0x08000f50

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000200 	.word	0x20000200
 800016c:	08000f50 	.word	0x08000f50

08000170 <clock_init>:


static unsigned char seven_segment[] = {0x01,0x79,0x24,0x30,0x58,0x12,0x02,0x19,0x00,0x10};

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Bit 2 IOPAEN: I/O port A clock enable
	GPIOA_Clock_Enable();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]

	//Bit 3 IOPBEN: I/O port B clock enable
	GPIOB_Clock_Enable();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <wait>:
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
	MCAL_GPIO_Init(GPIOB, &config);

}

void wait (unsigned int t) {
 8000198:	b480      	push	{r7}
 800019a:	b085      	sub	sp, #20
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]

	unsigned int i,j;
	for(i = 0 ; i < t ; i++)
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
 80001a4:	e00b      	b.n	80001be <wait+0x26>
		for(j = 0 ; j < 255 ; j++);
 80001a6:	2300      	movs	r3, #0
 80001a8:	60bb      	str	r3, [r7, #8]
 80001aa:	e002      	b.n	80001b2 <wait+0x1a>
 80001ac:	68bb      	ldr	r3, [r7, #8]
 80001ae:	3301      	adds	r3, #1
 80001b0:	60bb      	str	r3, [r7, #8]
 80001b2:	68bb      	ldr	r3, [r7, #8]
 80001b4:	2bfe      	cmp	r3, #254	; 0xfe
 80001b6:	d9f9      	bls.n	80001ac <wait+0x14>
	for(i = 0 ; i < t ; i++)
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	3301      	adds	r3, #1
 80001bc:	60fb      	str	r3, [r7, #12]
 80001be:	68fa      	ldr	r2, [r7, #12]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d3ef      	bcc.n	80001a6 <wait+0xe>
}
 80001c6:	bf00      	nop
 80001c8:	3714      	adds	r7, #20
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr

080001d0 <seven_seg_init>:


void seven_seg_init(){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0

	unsigned int i;
	uint16_t pin = GPIOx_PIN8;
 80001d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001da:	817b      	strh	r3, [r7, #10]
	GPIOx_Config_t config;

	for (i = 0 ; i < 7 ; i++){
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e010      	b.n	8000204 <seven_seg_init+0x34>
		config.PinNumber = pin;
 80001e2:	897b      	ldrh	r3, [r7, #10]
 80001e4:	80bb      	strh	r3, [r7, #4]
		config.MODE =  GPIO_MODE_out_PP;
 80001e6:	2304      	movs	r3, #4
 80001e8:	71bb      	strb	r3, [r7, #6]
		config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 80001ea:	2301      	movs	r3, #1
 80001ec:	71fb      	strb	r3, [r7, #7]
		MCAL_GPIO_Init(KEYPAD_PORT, &config);
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	4619      	mov	r1, r3
 80001f2:	4808      	ldr	r0, [pc, #32]	; (8000214 <seven_seg_init+0x44>)
 80001f4:	f000 f8f4 	bl	80003e0 <MCAL_GPIO_Init>
		pin = pin * 2;
 80001f8:	897b      	ldrh	r3, [r7, #10]
 80001fa:	005b      	lsls	r3, r3, #1
 80001fc:	817b      	strh	r3, [r7, #10]
	for (i = 0 ; i < 7 ; i++){
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	3301      	adds	r3, #1
 8000202:	60fb      	str	r3, [r7, #12]
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	2b06      	cmp	r3, #6
 8000208:	d9eb      	bls.n	80001e2 <seven_seg_init+0x12>
	}

}
 800020a:	bf00      	nop
 800020c:	3710      	adds	r7, #16
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40010c00 	.word	0x40010c00

08000218 <main>:


int main(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0

	char x[] = {'0'};
 800021e:	2330      	movs	r3, #48	; 0x30
 8000220:	713b      	strb	r3, [r7, #4]
	int y ;
	clock_init();
 8000222:	f7ff ffa5 	bl	8000170 <clock_init>
	LCD_INIT();
 8000226:	f000 fb45 	bl	80008b4 <LCD_INIT>
	seven_seg_init();
 800022a:	f7ff ffd1 	bl	80001d0 <seven_seg_init>
	wait(50);
 800022e:	2032      	movs	r0, #50	; 0x32
 8000230:	f7ff ffb2 	bl	8000198 <wait>
	//LCD_WRITE_STRING("Hello Sir :)");
	//LCD_clear_screen();
	for (unsigned char i = 0 ; i < 10; i++) {
 8000234:	2300      	movs	r3, #0
 8000236:	73fb      	strb	r3, [r7, #15]
 8000238:	e01d      	b.n	8000276 <main+0x5e>
		LCD_WRITE_CHAR(x[0]);
 800023a:	793b      	ldrb	r3, [r7, #4]
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fd13 	bl	8000c68 <LCD_WRITE_CHAR>
		MCAL_GPIO_WritePort(GPIOB, (seven_segment[i] << 8));
 8000242:	7bfb      	ldrb	r3, [r7, #15]
 8000244:	4a1d      	ldr	r2, [pc, #116]	; (80002bc <main+0xa4>)
 8000246:	5cd3      	ldrb	r3, [r2, r3]
 8000248:	b29b      	uxth	r3, r3
 800024a:	021b      	lsls	r3, r3, #8
 800024c:	b29b      	uxth	r3, r3
 800024e:	4619      	mov	r1, r3
 8000250:	481b      	ldr	r0, [pc, #108]	; (80002c0 <main+0xa8>)
 8000252:	f000 f989 	bl	8000568 <MCAL_GPIO_WritePort>
		y = atoi(x) + 1 ;
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f000 fd45 	bl	8000ce8 <atoi>
 800025e:	4603      	mov	r3, r0
 8000260:	3301      	adds	r3, #1
 8000262:	60bb      	str	r3, [r7, #8]
		itoa(y, x, 10);
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	220a      	movs	r2, #10
 8000268:	4619      	mov	r1, r3
 800026a:	68b8      	ldr	r0, [r7, #8]
 800026c:	f000 fd7c 	bl	8000d68 <itoa>
	for (unsigned char i = 0 ; i < 10; i++) {
 8000270:	7bfb      	ldrb	r3, [r7, #15]
 8000272:	3301      	adds	r3, #1
 8000274:	73fb      	strb	r3, [r7, #15]
 8000276:	7bfb      	ldrb	r3, [r7, #15]
 8000278:	2b09      	cmp	r3, #9
 800027a:	d9de      	bls.n	800023a <main+0x22>
	}
	LCD_clear_screen();
 800027c:	f000 face 	bl	800081c <LCD_clear_screen>
	LCD_WRITE_STRING("We Are Ready :)");
 8000280:	4810      	ldr	r0, [pc, #64]	; (80002c4 <main+0xac>)
 8000282:	f000 fd1d 	bl	8000cc0 <LCD_WRITE_STRING>
	LCD_clear_screen();
 8000286:	f000 fac9 	bl	800081c <LCD_clear_screen>
	Keypad_init();
 800028a:	f000 f97b 	bl	8000584 <Keypad_init>
	wait(50);
 800028e:	2032      	movs	r0, #50	; 0x32
 8000290:	f7ff ff82 	bl	8000198 <wait>
	unsigned char key_pressed;
	while(1){
		key_pressed = Keypad_getkey();
 8000294:	f000 f9dc 	bl	8000650 <Keypad_getkey>
 8000298:	4603      	mov	r3, r0
 800029a:	73bb      	strb	r3, [r7, #14]
		switch(key_pressed){
 800029c:	7bbb      	ldrb	r3, [r7, #14]
 800029e:	2b3f      	cmp	r3, #63	; 0x3f
 80002a0:	d002      	beq.n	80002a8 <main+0x90>
 80002a2:	2b41      	cmp	r3, #65	; 0x41
 80002a4:	d008      	beq.n	80002b8 <main+0xa0>
 80002a6:	e002      	b.n	80002ae <main+0x96>
		case 'A':
			break;
		case '?':
			LCD_clear_screen();
 80002a8:	f000 fab8 	bl	800081c <LCD_clear_screen>
			break;
 80002ac:	e005      	b.n	80002ba <main+0xa2>
		default:
			LCD_WRITE_CHAR(key_pressed);
 80002ae:	7bbb      	ldrb	r3, [r7, #14]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fcd9 	bl	8000c68 <LCD_WRITE_CHAR>
			break;
 80002b6:	e000      	b.n	80002ba <main+0xa2>
			break;
 80002b8:	bf00      	nop
		key_pressed = Keypad_getkey();
 80002ba:	e7eb      	b.n	8000294 <main+0x7c>
 80002bc:	20000000 	.word	0x20000000
 80002c0:	40010c00 	.word	0x40010c00
 80002c4:	08000f68 	.word	0x08000f68

080002c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c8:	480d      	ldr	r0, [pc, #52]	; (8000300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ca:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	; (8000304 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	; (8000308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	; (800030c <LoopForever+0xe>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	; (8000314 <LoopForever+0x16>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f6:	f000 fcfb 	bl	8000cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fa:	f7ff ff8d 	bl	8000218 <main>

080002fe <LoopForever>:

LoopForever:
    b LoopForever
 80002fe:	e7fe      	b.n	80002fe <LoopForever>
  ldr   r0, =_estack
 8000300:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 800030c:	080010b0 	.word	0x080010b0
  ldr r2, =_sbss
 8000310:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8000314:	20000220 	.word	0x20000220

08000318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC1_2_IRQHandler>

0800031a <get_CRLH_position>:

#include "Stm32F_103C6_Gpio_Driver.h"

#include "../Stm32_F103C6_Drivers/MCU Device Header/stm32f103x6.h"

uint8_t get_CRLH_position (uint16_t Pin_No){
 800031a:	b480      	push	{r7}
 800031c:	b083      	sub	sp, #12
 800031e:	af00      	add	r7, sp, #0
 8000320:	4603      	mov	r3, r0
 8000322:	80fb      	strh	r3, [r7, #6]

	switch(Pin_No){
 8000324:	88fb      	ldrh	r3, [r7, #6]
 8000326:	2b80      	cmp	r3, #128	; 0x80
 8000328:	d042      	beq.n	80003b0 <get_CRLH_position+0x96>
 800032a:	2b80      	cmp	r3, #128	; 0x80
 800032c:	dc11      	bgt.n	8000352 <get_CRLH_position+0x38>
 800032e:	2b08      	cmp	r3, #8
 8000330:	d036      	beq.n	80003a0 <get_CRLH_position+0x86>
 8000332:	2b08      	cmp	r3, #8
 8000334:	dc06      	bgt.n	8000344 <get_CRLH_position+0x2a>
 8000336:	2b02      	cmp	r3, #2
 8000338:	d02e      	beq.n	8000398 <get_CRLH_position+0x7e>
 800033a:	2b04      	cmp	r3, #4
 800033c:	d02e      	beq.n	800039c <get_CRLH_position+0x82>
 800033e:	2b01      	cmp	r3, #1
 8000340:	d028      	beq.n	8000394 <get_CRLH_position+0x7a>
 8000342:	e047      	b.n	80003d4 <get_CRLH_position+0xba>
 8000344:	2b20      	cmp	r3, #32
 8000346:	d02f      	beq.n	80003a8 <get_CRLH_position+0x8e>
 8000348:	2b40      	cmp	r3, #64	; 0x40
 800034a:	d02f      	beq.n	80003ac <get_CRLH_position+0x92>
 800034c:	2b10      	cmp	r3, #16
 800034e:	d029      	beq.n	80003a4 <get_CRLH_position+0x8a>
 8000350:	e040      	b.n	80003d4 <get_CRLH_position+0xba>
 8000352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000356:	d033      	beq.n	80003c0 <get_CRLH_position+0xa6>
 8000358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800035c:	dc09      	bgt.n	8000372 <get_CRLH_position+0x58>
 800035e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000362:	d029      	beq.n	80003b8 <get_CRLH_position+0x9e>
 8000364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000368:	d028      	beq.n	80003bc <get_CRLH_position+0xa2>
 800036a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800036e:	d021      	beq.n	80003b4 <get_CRLH_position+0x9a>
 8000370:	e030      	b.n	80003d4 <get_CRLH_position+0xba>
 8000372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000376:	d027      	beq.n	80003c8 <get_CRLH_position+0xae>
 8000378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800037c:	dc03      	bgt.n	8000386 <get_CRLH_position+0x6c>
 800037e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000382:	d01f      	beq.n	80003c4 <get_CRLH_position+0xaa>
 8000384:	e026      	b.n	80003d4 <get_CRLH_position+0xba>
 8000386:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800038a:	d01f      	beq.n	80003cc <get_CRLH_position+0xb2>
 800038c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000390:	d01e      	beq.n	80003d0 <get_CRLH_position+0xb6>
 8000392:	e01f      	b.n	80003d4 <get_CRLH_position+0xba>

	case GPIOx_PIN0 :
		return 0;
 8000394:	2300      	movs	r3, #0
 8000396:	e01e      	b.n	80003d6 <get_CRLH_position+0xbc>
		break;

	case GPIOx_PIN1 :
		return 4;
 8000398:	2304      	movs	r3, #4
 800039a:	e01c      	b.n	80003d6 <get_CRLH_position+0xbc>
		break;

	case GPIOx_PIN2 :
		return 8;
 800039c:	2308      	movs	r3, #8
 800039e:	e01a      	b.n	80003d6 <get_CRLH_position+0xbc>
		break;

	case GPIOx_PIN3 :
		return 12;
 80003a0:	230c      	movs	r3, #12
 80003a2:	e018      	b.n	80003d6 <get_CRLH_position+0xbc>
		break;

	case GPIOx_PIN4 :
		return 16;
 80003a4:	2310      	movs	r3, #16
 80003a6:	e016      	b.n	80003d6 <get_CRLH_position+0xbc>
		break;

	case GPIOx_PIN5 :
		return 20;
 80003a8:	2314      	movs	r3, #20
 80003aa:	e014      	b.n	80003d6 <get_CRLH_position+0xbc>
		break;

	case GPIOx_PIN6 :
		return 24;
 80003ac:	2318      	movs	r3, #24
 80003ae:	e012      	b.n	80003d6 <get_CRLH_position+0xbc>
		break;

	case GPIOx_PIN7 :
		return 28;
 80003b0:	231c      	movs	r3, #28
 80003b2:	e010      	b.n	80003d6 <get_CRLH_position+0xbc>
		break;

	case GPIOx_PIN8 :
		return 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	e00e      	b.n	80003d6 <get_CRLH_position+0xbc>
		break;

	case GPIOx_PIN9 :
		return 4;
 80003b8:	2304      	movs	r3, #4
 80003ba:	e00c      	b.n	80003d6 <get_CRLH_position+0xbc>
		break;

	case GPIOx_PIN10 :
		return 8;
 80003bc:	2308      	movs	r3, #8
 80003be:	e00a      	b.n	80003d6 <get_CRLH_position+0xbc>
		break;

	case GPIOx_PIN11 :
		return 12;
 80003c0:	230c      	movs	r3, #12
 80003c2:	e008      	b.n	80003d6 <get_CRLH_position+0xbc>
		break;

	case GPIOx_PIN12 :
		return 16;
 80003c4:	2310      	movs	r3, #16
 80003c6:	e006      	b.n	80003d6 <get_CRLH_position+0xbc>
		break;

	case GPIOx_PIN13 :
		return 20;
 80003c8:	2314      	movs	r3, #20
 80003ca:	e004      	b.n	80003d6 <get_CRLH_position+0xbc>
		break;

	case GPIOx_PIN14 :
		return 24;
 80003cc:	2318      	movs	r3, #24
 80003ce:	e002      	b.n	80003d6 <get_CRLH_position+0xbc>
		break;

	case GPIOx_PIN15 :
		return 28;
 80003d0:	231c      	movs	r3, #28
 80003d2:	e000      	b.n	80003d6 <get_CRLH_position+0xbc>
		break;

	}
	return 0;
 80003d4:	2300      	movs	r3, #0
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr

080003e0 <MCAL_GPIO_Init>:
 * @retval          - none
 * Note             - Stm32F103C6 MCU Has GPIO (A,B,C,D,E) modules
 * 					  But LQFP48 has only GPIO A,B,Part of C\D exported as external PINS from MCU
 *================================================================ */
void MCAL_GPIO_Init(GPIO_typeDef* GPIOx , GPIOx_Config_t* Pin_config)
{
 80003e0:	b590      	push	{r4, r7, lr}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
	volatile uint32_t* config = NULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	73fb      	strb	r3, [r7, #15]

	config = (Pin_config->PinNumber < GPIOx_PIN8 )? &GPIOx->GPIOx_CRL : &GPIOx->GPIOx_CRH;
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	881b      	ldrh	r3, [r3, #0]
 80003f6:	b29b      	uxth	r3, r3
 80003f8:	2bff      	cmp	r3, #255	; 0xff
 80003fa:	d801      	bhi.n	8000400 <MCAL_GPIO_Init+0x20>
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	e001      	b.n	8000404 <MCAL_GPIO_Init+0x24>
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3304      	adds	r3, #4
 8000404:	60bb      	str	r3, [r7, #8]

	(*config) &= ~(0xf << get_CRLH_position(Pin_config->PinNumber) );
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	b29b      	uxth	r3, r3
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff ff84 	bl	800031a <get_CRLH_position>
 8000412:	4603      	mov	r3, r0
 8000414:	461a      	mov	r2, r3
 8000416:	230f      	movs	r3, #15
 8000418:	4093      	lsls	r3, r2
 800041a:	43da      	mvns	r2, r3
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	401a      	ands	r2, r3
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	601a      	str	r2, [r3, #0]

	if ( ((Pin_config->MODE)== GPIO_MODE_AF_out_OD) ||  ((Pin_config->MODE)== GPIO_MODE_AF_out_PP) || ((Pin_config->MODE)== GPIO_MODE_out_OD) || ( (Pin_config->MODE)== GPIO_MODE_out_PP) )
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	789b      	ldrb	r3, [r3, #2]
 800042a:	b2db      	uxtb	r3, r3
 800042c:	2b07      	cmp	r3, #7
 800042e:	d00e      	beq.n	800044e <MCAL_GPIO_Init+0x6e>
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	789b      	ldrb	r3, [r3, #2]
 8000434:	b2db      	uxtb	r3, r3
 8000436:	2b06      	cmp	r3, #6
 8000438:	d009      	beq.n	800044e <MCAL_GPIO_Init+0x6e>
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	789b      	ldrb	r3, [r3, #2]
 800043e:	b2db      	uxtb	r3, r3
 8000440:	2b05      	cmp	r3, #5
 8000442:	d004      	beq.n	800044e <MCAL_GPIO_Init+0x6e>
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	789b      	ldrb	r3, [r3, #2]
 8000448:	b2db      	uxtb	r3, r3
 800044a:	2b04      	cmp	r3, #4
 800044c:	d110      	bne.n	8000470 <MCAL_GPIO_Init+0x90>
	{

		PIN_Config =  ( (((Pin_config->MODE - 4)  << 2) | (Pin_config->OutPut_Speed)) & 0x0f);
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	789b      	ldrb	r3, [r3, #2]
 8000452:	b2db      	uxtb	r3, r3
 8000454:	3b04      	subs	r3, #4
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	b25a      	sxtb	r2, r3
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	78db      	ldrb	r3, [r3, #3]
 800045e:	b2db      	uxtb	r3, r3
 8000460:	b25b      	sxtb	r3, r3
 8000462:	4313      	orrs	r3, r2
 8000464:	b25b      	sxtb	r3, r3
 8000466:	b2db      	uxtb	r3, r3
 8000468:	f003 030f 	and.w	r3, r3, #15
 800046c:	73fb      	strb	r3, [r7, #15]
 800046e:	e03a      	b.n	80004e6 <MCAL_GPIO_Init+0x106>
	}
	else
	{
		if ( (Pin_config->MODE == GPIO_MODE_Analog_in) || (Pin_config->MODE == GPIO_MODE_Fl_in) )
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	789b      	ldrb	r3, [r3, #2]
 8000474:	b2db      	uxtb	r3, r3
 8000476:	2b00      	cmp	r3, #0
 8000478:	d004      	beq.n	8000484 <MCAL_GPIO_Init+0xa4>
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	789b      	ldrb	r3, [r3, #2]
 800047e:	b2db      	uxtb	r3, r3
 8000480:	2b01      	cmp	r3, #1
 8000482:	d108      	bne.n	8000496 <MCAL_GPIO_Init+0xb6>
		{
			PIN_Config =  ( (((Pin_config->MODE)  << 2) | 0x0 ) & 0x0f);
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	789b      	ldrb	r3, [r3, #2]
 8000488:	b2db      	uxtb	r3, r3
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	b2db      	uxtb	r3, r3
 800048e:	f003 030f 	and.w	r3, r3, #15
 8000492:	73fb      	strb	r3, [r7, #15]
 8000494:	e027      	b.n	80004e6 <MCAL_GPIO_Init+0x106>
		}
		else if ( Pin_config->MODE == GPIO_MODE_AF_in)
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	789b      	ldrb	r3, [r3, #2]
 800049a:	b2db      	uxtb	r3, r3
 800049c:	2b08      	cmp	r3, #8
 800049e:	d102      	bne.n	80004a6 <MCAL_GPIO_Init+0xc6>
		{
			PIN_Config =  ( (((GPIO_MODE_Fl_in)  << 2) | 0x0 ) & 0x0f);
 80004a0:	2304      	movs	r3, #4
 80004a2:	73fb      	strb	r3, [r7, #15]
 80004a4:	e01f      	b.n	80004e6 <MCAL_GPIO_Init+0x106>
		}
		else
		{
			PIN_Config =  ( (((GPIO_MODE_In_PU)  << 2) | 0x0 ) & 0x0f);
 80004a6:	2308      	movs	r3, #8
 80004a8:	73fb      	strb	r3, [r7, #15]

			if ( Pin_config->MODE == GPIO_MODE_In_PU)
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	789b      	ldrb	r3, [r3, #2]
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	2b02      	cmp	r3, #2
 80004b2:	d10c      	bne.n	80004ce <MCAL_GPIO_Init+0xee>
			{
				GPIOx->GPIOx_ODR |= 1 << Pin_config->PinNumber;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	881b      	ldrh	r3, [r3, #0]
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	461a      	mov	r2, r3
 80004bc:	2301      	movs	r3, #1
 80004be:	fa03 f202 	lsl.w	r2, r3, r2
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	431a      	orrs	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	e00b      	b.n	80004e6 <MCAL_GPIO_Init+0x106>
			}
			else
			{
				GPIOx->GPIOx_ODR &= ~(1 << Pin_config->PinNumber);
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	461a      	mov	r2, r3
 80004d6:	2301      	movs	r3, #1
 80004d8:	4093      	lsls	r3, r2
 80004da:	43da      	mvns	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	401a      	ands	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*config) |=  ( (PIN_Config) << get_CRLH_position(Pin_config->PinNumber) );
 80004e6:	7bfc      	ldrb	r4, [r7, #15]
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff ff13 	bl	800031a <get_CRLH_position>
 80004f4:	4603      	mov	r3, r0
 80004f6:	fa04 f203 	lsl.w	r2, r4, r3
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	431a      	orrs	r2, r3
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	601a      	str	r2, [r3, #0]
}
 8000504:	bf00      	nop
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	bd90      	pop	{r4, r7, pc}

0800050c <MCAL_GPIO_ReadPin>:
 * @param [in]      - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
 * @param [in]      - Pin_No: GPIOx PIN Number
 * @retval          - uint8_t -> @ref GPIO_PIN_State
 * Note             - none
 *================================================================ */
uint8_t MCAL_GPIO_ReadPin(GPIO_typeDef* GPIOx , uint16_t Pin_No){
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	807b      	strh	r3, [r7, #2]

	uint8_t tmp ;
	if ( ( GPIOx->GPIOx_IDR & (Pin_No) ) != ((uint32_t)GPIO_Pin_reset) ){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	689a      	ldr	r2, [r3, #8]
 800051c:	887b      	ldrh	r3, [r7, #2]
 800051e:	4013      	ands	r3, r2
 8000520:	2b00      	cmp	r3, #0
 8000522:	d002      	beq.n	800052a <MCAL_GPIO_ReadPin+0x1e>
		tmp = GPIO_Pin_set;
 8000524:	2301      	movs	r3, #1
 8000526:	73fb      	strb	r3, [r7, #15]
 8000528:	e001      	b.n	800052e <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		tmp = GPIO_Pin_reset;
 800052a:	2300      	movs	r3, #0
 800052c:	73fb      	strb	r3, [r7, #15]
	}
	return tmp;
 800052e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000530:	4618      	mov	r0, r3
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr

0800053a <MCAL_GPIO_WritePin>:
 * @param [in]      - Pin_No: GPIOx PIN Number
 * @param [in]      - Value: The Input Value
 * @retval          - none
 * Note             - none
 *================================================================ */
void MCAL_GPIO_WritePin(GPIO_typeDef* GPIOx , uint16_t Pin_No , uint8_t Value){
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	460b      	mov	r3, r1
 8000544:	807b      	strh	r3, [r7, #2]
 8000546:	4613      	mov	r3, r2
 8000548:	707b      	strb	r3, [r7, #1]

	if(Value != GPIO_Pin_reset){
 800054a:	787b      	ldrb	r3, [r7, #1]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d003      	beq.n	8000558 <MCAL_GPIO_WritePin+0x1e>
		These bits are write-only and can be accessed in Word mode only.
		0: No action on the corresponding ODRx bit
		1: Set the corresponding ODRx bit
		 */

		GPIOx->GPIOx_BSRR = (uint32_t)Pin_No;
 8000550:	887a      	ldrh	r2, [r7, #2]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	611a      	str	r2, [r3, #16]
		 */

		GPIOx->GPIOx_BRR = (uint32_t)Pin_No;
	}

}
 8000556:	e002      	b.n	800055e <MCAL_GPIO_WritePin+0x24>
		GPIOx->GPIOx_BRR = (uint32_t)Pin_No;
 8000558:	887a      	ldrh	r2, [r7, #2]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	615a      	str	r2, [r3, #20]
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr

08000568 <MCAL_GPIO_WritePort>:
 * @param [in]      - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
 * @param [in]      - Value: The Input Value
 * @retval          - none
 * Note             - none
 *================================================================ */
void MCAL_GPIO_WritePort(GPIO_typeDef* GPIOx , uint16_t Value){
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	807b      	strh	r3, [r7, #2]

	GPIOx->GPIOx_ODR = (uint16_t)Value;
 8000574:	887a      	ldrh	r2, [r7, #2]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	60da      	str	r2, [r3, #12]
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <Keypad_init>:
int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3};//columns



void Keypad_init(){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

	GPIOx_Config_t config;

	config.PinNumber = R0;
 800058a:	2301      	movs	r3, #1
 800058c:	80bb      	strh	r3, [r7, #4]
	config.MODE =  GPIO_MODE_out_PP;
 800058e:	2304      	movs	r3, #4
 8000590:	71bb      	strb	r3, [r7, #6]
	config.OutPut_Speed = GPIO_Out_max_Speed_50_MHz;
 8000592:	2303      	movs	r3, #3
 8000594:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &config);
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	4619      	mov	r1, r3
 800059a:	482c      	ldr	r0, [pc, #176]	; (800064c <Keypad_init+0xc8>)
 800059c:	f7ff ff20 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = R1;
 80005a0:	2302      	movs	r3, #2
 80005a2:	80bb      	strh	r3, [r7, #4]
	config.MODE =  GPIO_MODE_out_PP;
 80005a4:	2304      	movs	r3, #4
 80005a6:	71bb      	strb	r3, [r7, #6]
	config.OutPut_Speed =  GPIO_Out_max_Speed_50_MHz;
 80005a8:	2303      	movs	r3, #3
 80005aa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &config);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	4619      	mov	r1, r3
 80005b0:	4826      	ldr	r0, [pc, #152]	; (800064c <Keypad_init+0xc8>)
 80005b2:	f7ff ff15 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = R2;
 80005b6:	2304      	movs	r3, #4
 80005b8:	80bb      	strh	r3, [r7, #4]
	config.MODE =  GPIO_MODE_out_PP;
 80005ba:	2304      	movs	r3, #4
 80005bc:	71bb      	strb	r3, [r7, #6]
	config.OutPut_Speed =  GPIO_Out_max_Speed_50_MHz;
 80005be:	2303      	movs	r3, #3
 80005c0:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &config);
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	4619      	mov	r1, r3
 80005c6:	4821      	ldr	r0, [pc, #132]	; (800064c <Keypad_init+0xc8>)
 80005c8:	f7ff ff0a 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = R3;
 80005cc:	2308      	movs	r3, #8
 80005ce:	80bb      	strh	r3, [r7, #4]
	config.MODE =  GPIO_MODE_out_PP;
 80005d0:	2304      	movs	r3, #4
 80005d2:	71bb      	strb	r3, [r7, #6]
	config.OutPut_Speed =  GPIO_Out_max_Speed_50_MHz;
 80005d4:	2303      	movs	r3, #3
 80005d6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &config);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4619      	mov	r1, r3
 80005dc:	481b      	ldr	r0, [pc, #108]	; (800064c <Keypad_init+0xc8>)
 80005de:	f7ff feff 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = C0;
 80005e2:	2310      	movs	r3, #16
 80005e4:	80bb      	strh	r3, [r7, #4]
	config.MODE =  GPIO_MODE_out_PP;
 80005e6:	2304      	movs	r3, #4
 80005e8:	71bb      	strb	r3, [r7, #6]
	config.OutPut_Speed =  GPIO_Out_max_Speed_50_MHz;
 80005ea:	2303      	movs	r3, #3
 80005ec:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &config);
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4619      	mov	r1, r3
 80005f2:	4816      	ldr	r0, [pc, #88]	; (800064c <Keypad_init+0xc8>)
 80005f4:	f7ff fef4 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = C1;
 80005f8:	2320      	movs	r3, #32
 80005fa:	80bb      	strh	r3, [r7, #4]
	config.MODE =  GPIO_MODE_out_PP;
 80005fc:	2304      	movs	r3, #4
 80005fe:	71bb      	strb	r3, [r7, #6]
	config.OutPut_Speed =  GPIO_Out_max_Speed_50_MHz;
 8000600:	2303      	movs	r3, #3
 8000602:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &config);
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	4619      	mov	r1, r3
 8000608:	4810      	ldr	r0, [pc, #64]	; (800064c <Keypad_init+0xc8>)
 800060a:	f7ff fee9 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = C2;
 800060e:	2340      	movs	r3, #64	; 0x40
 8000610:	80bb      	strh	r3, [r7, #4]
	config.MODE =  GPIO_MODE_out_PP;
 8000612:	2304      	movs	r3, #4
 8000614:	71bb      	strb	r3, [r7, #6]
	config.OutPut_Speed =  GPIO_Out_max_Speed_50_MHz;
 8000616:	2303      	movs	r3, #3
 8000618:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &config);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4619      	mov	r1, r3
 800061e:	480b      	ldr	r0, [pc, #44]	; (800064c <Keypad_init+0xc8>)
 8000620:	f7ff fede 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = C3;
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	80bb      	strh	r3, [r7, #4]
	config.MODE =  GPIO_MODE_out_PP;
 8000628:	2304      	movs	r3, #4
 800062a:	71bb      	strb	r3, [r7, #6]
	config.OutPut_Speed = GPIO_Out_max_Speed_50_MHz;
 800062c:	2303      	movs	r3, #3
 800062e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &config);
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <Keypad_init+0xc8>)
 8000636:	f7ff fed3 	bl	80003e0 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePort(KEYPAD_PORT, 0xFF);
 800063a:	21ff      	movs	r1, #255	; 0xff
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <Keypad_init+0xc8>)
 800063e:	f7ff ff93 	bl	8000568 <MCAL_GPIO_WritePort>

}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40010c00 	.word	0x40010c00

08000650 <Keypad_getkey>:

char Keypad_getkey(){
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
	int i,j;
	for (i = 0; i < 4; i++){
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	e0b4      	b.n	80007c6 <Keypad_getkey+0x176>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[0], 1);
 800065c:	4b5e      	ldr	r3, [pc, #376]	; (80007d8 <Keypad_getkey+0x188>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	b29b      	uxth	r3, r3
 8000662:	2201      	movs	r2, #1
 8000664:	4619      	mov	r1, r3
 8000666:	485d      	ldr	r0, [pc, #372]	; (80007dc <Keypad_getkey+0x18c>)
 8000668:	f7ff ff67 	bl	800053a <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[1], 1);
 800066c:	4b5a      	ldr	r3, [pc, #360]	; (80007d8 <Keypad_getkey+0x188>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	b29b      	uxth	r3, r3
 8000672:	2201      	movs	r2, #1
 8000674:	4619      	mov	r1, r3
 8000676:	4859      	ldr	r0, [pc, #356]	; (80007dc <Keypad_getkey+0x18c>)
 8000678:	f7ff ff5f 	bl	800053a <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[2], 1);
 800067c:	4b56      	ldr	r3, [pc, #344]	; (80007d8 <Keypad_getkey+0x188>)
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	b29b      	uxth	r3, r3
 8000682:	2201      	movs	r2, #1
 8000684:	4619      	mov	r1, r3
 8000686:	4855      	ldr	r0, [pc, #340]	; (80007dc <Keypad_getkey+0x18c>)
 8000688:	f7ff ff57 	bl	800053a <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[3], 1);
 800068c:	4b52      	ldr	r3, [pc, #328]	; (80007d8 <Keypad_getkey+0x188>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	b29b      	uxth	r3, r3
 8000692:	2201      	movs	r2, #1
 8000694:	4619      	mov	r1, r3
 8000696:	4851      	ldr	r0, [pc, #324]	; (80007dc <Keypad_getkey+0x18c>)
 8000698:	f7ff ff4f 	bl	800053a <MCAL_GPIO_WritePin>

		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i], 0);
 800069c:	4a4e      	ldr	r2, [pc, #312]	; (80007d8 <Keypad_getkey+0x188>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	2200      	movs	r2, #0
 80006a8:	4619      	mov	r1, r3
 80006aa:	484c      	ldr	r0, [pc, #304]	; (80007dc <Keypad_getkey+0x18c>)
 80006ac:	f7ff ff45 	bl	800053a <MCAL_GPIO_WritePin>


		for(j = 0; j < 4; j++){
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	e080      	b.n	80007b8 <Keypad_getkey+0x168>
			if ( MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == 0)
 80006b6:	4a4a      	ldr	r2, [pc, #296]	; (80007e0 <Keypad_getkey+0x190>)
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	4619      	mov	r1, r3
 80006c2:	4846      	ldr	r0, [pc, #280]	; (80007dc <Keypad_getkey+0x18c>)
 80006c4:	f7ff ff22 	bl	800050c <MCAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d171      	bne.n	80007b2 <Keypad_getkey+0x162>
			{
				while( MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == 0);
 80006ce:	bf00      	nop
 80006d0:	4a43      	ldr	r2, [pc, #268]	; (80007e0 <Keypad_getkey+0x190>)
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	483f      	ldr	r0, [pc, #252]	; (80007dc <Keypad_getkey+0x18c>)
 80006de:	f7ff ff15 	bl	800050c <MCAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0f3      	beq.n	80006d0 <Keypad_getkey+0x80>
				switch(i){
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d861      	bhi.n	80007b2 <Keypad_getkey+0x162>
 80006ee:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <Keypad_getkey+0xa4>)
 80006f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f4:	08000705 	.word	0x08000705
 80006f8:	0800072d 	.word	0x0800072d
 80006fc:	08000755 	.word	0x08000755
 8000700:	0800077d 	.word	0x0800077d
					case (0):
						if (j == 0) return '7';
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d101      	bne.n	800070e <Keypad_getkey+0xbe>
 800070a:	2337      	movs	r3, #55	; 0x37
 800070c:	e060      	b.n	80007d0 <Keypad_getkey+0x180>
						else if (j == 1) return '4';
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d101      	bne.n	8000718 <Keypad_getkey+0xc8>
 8000714:	2334      	movs	r3, #52	; 0x34
 8000716:	e05b      	b.n	80007d0 <Keypad_getkey+0x180>
						else if (j == 2) return '1';
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	2b02      	cmp	r3, #2
 800071c:	d101      	bne.n	8000722 <Keypad_getkey+0xd2>
 800071e:	2331      	movs	r3, #49	; 0x31
 8000720:	e056      	b.n	80007d0 <Keypad_getkey+0x180>
						else if (j == 3) return '?';
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	2b03      	cmp	r3, #3
 8000726:	d13d      	bne.n	80007a4 <Keypad_getkey+0x154>
 8000728:	233f      	movs	r3, #63	; 0x3f
 800072a:	e051      	b.n	80007d0 <Keypad_getkey+0x180>
						break;
					case (1):
						if (j == 0) return '8';
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d101      	bne.n	8000736 <Keypad_getkey+0xe6>
 8000732:	2338      	movs	r3, #56	; 0x38
 8000734:	e04c      	b.n	80007d0 <Keypad_getkey+0x180>
						else if (j == 1) return '5';
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d101      	bne.n	8000740 <Keypad_getkey+0xf0>
 800073c:	2335      	movs	r3, #53	; 0x35
 800073e:	e047      	b.n	80007d0 <Keypad_getkey+0x180>
						else if (j == 2) return '2';
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	2b02      	cmp	r3, #2
 8000744:	d101      	bne.n	800074a <Keypad_getkey+0xfa>
 8000746:	2332      	movs	r3, #50	; 0x32
 8000748:	e042      	b.n	80007d0 <Keypad_getkey+0x180>
						else if (j == 3) return '0';
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	2b03      	cmp	r3, #3
 800074e:	d12b      	bne.n	80007a8 <Keypad_getkey+0x158>
 8000750:	2330      	movs	r3, #48	; 0x30
 8000752:	e03d      	b.n	80007d0 <Keypad_getkey+0x180>
						break;
					case (2):
						if (j == 0) return '9';
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d101      	bne.n	800075e <Keypad_getkey+0x10e>
 800075a:	2339      	movs	r3, #57	; 0x39
 800075c:	e038      	b.n	80007d0 <Keypad_getkey+0x180>
						else if (j == 1) return '6';
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d101      	bne.n	8000768 <Keypad_getkey+0x118>
 8000764:	2336      	movs	r3, #54	; 0x36
 8000766:	e033      	b.n	80007d0 <Keypad_getkey+0x180>
						else if (j == 2) return '3';
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	2b02      	cmp	r3, #2
 800076c:	d101      	bne.n	8000772 <Keypad_getkey+0x122>
 800076e:	2333      	movs	r3, #51	; 0x33
 8000770:	e02e      	b.n	80007d0 <Keypad_getkey+0x180>
						else if (j == 3) return '=';
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	2b03      	cmp	r3, #3
 8000776:	d119      	bne.n	80007ac <Keypad_getkey+0x15c>
 8000778:	233d      	movs	r3, #61	; 0x3d
 800077a:	e029      	b.n	80007d0 <Keypad_getkey+0x180>
						break;
					case (3):
						if (j == 0) return '/';
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d101      	bne.n	8000786 <Keypad_getkey+0x136>
 8000782:	232f      	movs	r3, #47	; 0x2f
 8000784:	e024      	b.n	80007d0 <Keypad_getkey+0x180>
						else if (j == 1) return '*';
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d101      	bne.n	8000790 <Keypad_getkey+0x140>
 800078c:	232a      	movs	r3, #42	; 0x2a
 800078e:	e01f      	b.n	80007d0 <Keypad_getkey+0x180>
						else if (j == 2) return '-';
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	2b02      	cmp	r3, #2
 8000794:	d101      	bne.n	800079a <Keypad_getkey+0x14a>
 8000796:	232d      	movs	r3, #45	; 0x2d
 8000798:	e01a      	b.n	80007d0 <Keypad_getkey+0x180>
						else if (j == 3) return '+';
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	2b03      	cmp	r3, #3
 800079e:	d107      	bne.n	80007b0 <Keypad_getkey+0x160>
 80007a0:	232b      	movs	r3, #43	; 0x2b
 80007a2:	e015      	b.n	80007d0 <Keypad_getkey+0x180>
						break;
 80007a4:	bf00      	nop
 80007a6:	e004      	b.n	80007b2 <Keypad_getkey+0x162>
						break;
 80007a8:	bf00      	nop
 80007aa:	e002      	b.n	80007b2 <Keypad_getkey+0x162>
						break;
 80007ac:	bf00      	nop
 80007ae:	e000      	b.n	80007b2 <Keypad_getkey+0x162>
						break;
 80007b0:	bf00      	nop
		for(j = 0; j < 4; j++){
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	f77f af7b 	ble.w	80006b6 <Keypad_getkey+0x66>
	for (i = 0; i < 4; i++){
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	f77f af47 	ble.w	800065c <Keypad_getkey+0xc>
				}
			}
		}
	}
	return 'A';
 80007ce:	2341      	movs	r3, #65	; 0x41
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2000001c 	.word	0x2000001c
 80007dc:	40010c00 	.word	0x40010c00
 80007e0:	2000000c 	.word	0x2000000c

080007e4 <_delay_ms>:
#include "LCD.h"

int curser = 0;
GPIOx_Config_t config;

void _delay_ms (unsigned int t) {
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

	unsigned int i,j;
	for(i = 0 ; i < t ; i++)
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	e00b      	b.n	800080a <_delay_ms+0x26>
		for(j = 0 ; j < 255 ; j++);
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	e002      	b.n	80007fe <_delay_ms+0x1a>
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	2bfe      	cmp	r3, #254	; 0xfe
 8000802:	d9f9      	bls.n	80007f8 <_delay_ms+0x14>
	for(i = 0 ; i < t ; i++)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3301      	adds	r3, #1
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	d3ef      	bcc.n	80007f2 <_delay_ms+0xe>
}
 8000812:	bf00      	nop
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <LCD_clear_screen>:

void LCD_clear_screen(){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	curser = 0;
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <LCD_clear_screen+0x14>)
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000826:	2001      	movs	r0, #1
 8000828:	f000 f9d8 	bl	8000bdc <LCD_WRITE_COMMAND>
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000218 	.word	0x20000218

08000834 <LCD_lcd_kick>:

void LCD_lcd_kick(){
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

	MCAL_GPIO_WritePin(GPIOA, EN_SWITCH , 1);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083e:	4807      	ldr	r0, [pc, #28]	; (800085c <LCD_lcd_kick+0x28>)
 8000840:	f7ff fe7b 	bl	800053a <MCAL_GPIO_WritePin>

	_delay_ms(50);
 8000844:	2032      	movs	r0, #50	; 0x32
 8000846:	f7ff ffcd 	bl	80007e4 <_delay_ms>

	MCAL_GPIO_WritePin(GPIOA, EN_SWITCH , 0);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <LCD_lcd_kick+0x28>)
 8000852:	f7ff fe72 	bl	800053a <MCAL_GPIO_WritePin>
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40010800 	.word	0x40010800

08000860 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	460a      	mov	r2, r1
 800086a:	71fb      	strb	r3, [r7, #7]
 800086c:	4613      	mov	r3, r2
 800086e:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d108      	bne.n	8000888 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	2b0f      	cmp	r3, #15
 800087a:	d805      	bhi.n	8000888 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 800087c:	79bb      	ldrb	r3, [r7, #6]
 800087e:	3b80      	subs	r3, #128	; 0x80
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f9aa 	bl	8000bdc <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	2b02      	cmp	r3, #2
 800088c:	d10b      	bne.n	80008a6 <LCD_GOTO_XY+0x46>
	{
		if (position < 16 && position >= 0)
 800088e:	79bb      	ldrb	r3, [r7, #6]
 8000890:	2b0f      	cmp	r3, #15
 8000892:	d808      	bhi.n	80008a6 <LCD_GOTO_XY+0x46>
		{
			curser = 16;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <LCD_GOTO_XY+0x50>)
 8000896:	2210      	movs	r2, #16
 8000898:	601a      	str	r2, [r3, #0]
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 800089a:	79bb      	ldrb	r3, [r7, #6]
 800089c:	3b40      	subs	r3, #64	; 0x40
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f99b 	bl	8000bdc <LCD_WRITE_COMMAND>
		}
	}
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000218 	.word	0x20000218

080008b4 <LCD_INIT>:

void LCD_INIT(){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

	_delay_ms(20);
 80008b8:	2014      	movs	r0, #20
 80008ba:	f7ff ff93 	bl	80007e4 <_delay_ms>

	config.PinNumber = EN_SWITCH;
 80008be:	4b5b      	ldr	r3, [pc, #364]	; (8000a2c <LCD_INIT+0x178>)
 80008c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008c4:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 80008c6:	4b59      	ldr	r3, [pc, #356]	; (8000a2c <LCD_INIT+0x178>)
 80008c8:	2204      	movs	r2, #4
 80008ca:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 80008cc:	4b57      	ldr	r3, [pc, #348]	; (8000a2c <LCD_INIT+0x178>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 80008d2:	4956      	ldr	r1, [pc, #344]	; (8000a2c <LCD_INIT+0x178>)
 80008d4:	4856      	ldr	r0, [pc, #344]	; (8000a30 <LCD_INIT+0x17c>)
 80008d6:	f7ff fd83 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = RS_SWITCH;
 80008da:	4b54      	ldr	r3, [pc, #336]	; (8000a2c <LCD_INIT+0x178>)
 80008dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008e0:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 80008e2:	4b52      	ldr	r3, [pc, #328]	; (8000a2c <LCD_INIT+0x178>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 80008e8:	4b50      	ldr	r3, [pc, #320]	; (8000a2c <LCD_INIT+0x178>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 80008ee:	494f      	ldr	r1, [pc, #316]	; (8000a2c <LCD_INIT+0x178>)
 80008f0:	484f      	ldr	r0, [pc, #316]	; (8000a30 <LCD_INIT+0x17c>)
 80008f2:	f7ff fd75 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = RW_SWITCH;
 80008f6:	4b4d      	ldr	r3, [pc, #308]	; (8000a2c <LCD_INIT+0x178>)
 80008f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fc:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 80008fe:	4b4b      	ldr	r3, [pc, #300]	; (8000a2c <LCD_INIT+0x178>)
 8000900:	2204      	movs	r2, #4
 8000902:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 8000904:	4b49      	ldr	r3, [pc, #292]	; (8000a2c <LCD_INIT+0x178>)
 8000906:	2201      	movs	r2, #1
 8000908:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 800090a:	4948      	ldr	r1, [pc, #288]	; (8000a2c <LCD_INIT+0x178>)
 800090c:	4848      	ldr	r0, [pc, #288]	; (8000a30 <LCD_INIT+0x17c>)
 800090e:	f7ff fd67 	bl	80003e0 <MCAL_GPIO_Init>

	///===========================================


	MCAL_GPIO_WritePin(GPIOA, EN_SWITCH , 0);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000918:	4845      	ldr	r0, [pc, #276]	; (8000a30 <LCD_INIT+0x17c>)
 800091a:	f7ff fe0e 	bl	800053a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, RS_SWITCH , 0);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000924:	4842      	ldr	r0, [pc, #264]	; (8000a30 <LCD_INIT+0x17c>)
 8000926:	f7ff fe08 	bl	800053a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, RW_SWITCH , 0);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000930:	483f      	ldr	r0, [pc, #252]	; (8000a30 <LCD_INIT+0x17c>)
 8000932:	f7ff fe02 	bl	800053a <MCAL_GPIO_WritePin>


	config.PinNumber = GPIOx_PIN0;
 8000936:	4b3d      	ldr	r3, [pc, #244]	; (8000a2c <LCD_INIT+0x178>)
 8000938:	2201      	movs	r2, #1
 800093a:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 800093c:	4b3b      	ldr	r3, [pc, #236]	; (8000a2c <LCD_INIT+0x178>)
 800093e:	2204      	movs	r2, #4
 8000940:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 8000942:	4b3a      	ldr	r3, [pc, #232]	; (8000a2c <LCD_INIT+0x178>)
 8000944:	2201      	movs	r2, #1
 8000946:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 8000948:	4938      	ldr	r1, [pc, #224]	; (8000a2c <LCD_INIT+0x178>)
 800094a:	4839      	ldr	r0, [pc, #228]	; (8000a30 <LCD_INIT+0x17c>)
 800094c:	f7ff fd48 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN1;
 8000950:	4b36      	ldr	r3, [pc, #216]	; (8000a2c <LCD_INIT+0x178>)
 8000952:	2202      	movs	r2, #2
 8000954:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 8000956:	4b35      	ldr	r3, [pc, #212]	; (8000a2c <LCD_INIT+0x178>)
 8000958:	2204      	movs	r2, #4
 800095a:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 800095c:	4b33      	ldr	r3, [pc, #204]	; (8000a2c <LCD_INIT+0x178>)
 800095e:	2201      	movs	r2, #1
 8000960:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 8000962:	4932      	ldr	r1, [pc, #200]	; (8000a2c <LCD_INIT+0x178>)
 8000964:	4832      	ldr	r0, [pc, #200]	; (8000a30 <LCD_INIT+0x17c>)
 8000966:	f7ff fd3b 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN2;
 800096a:	4b30      	ldr	r3, [pc, #192]	; (8000a2c <LCD_INIT+0x178>)
 800096c:	2204      	movs	r2, #4
 800096e:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 8000970:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <LCD_INIT+0x178>)
 8000972:	2204      	movs	r2, #4
 8000974:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 8000976:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <LCD_INIT+0x178>)
 8000978:	2201      	movs	r2, #1
 800097a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 800097c:	492b      	ldr	r1, [pc, #172]	; (8000a2c <LCD_INIT+0x178>)
 800097e:	482c      	ldr	r0, [pc, #176]	; (8000a30 <LCD_INIT+0x17c>)
 8000980:	f7ff fd2e 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN3;
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <LCD_INIT+0x178>)
 8000986:	2208      	movs	r2, #8
 8000988:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <LCD_INIT+0x178>)
 800098c:	2204      	movs	r2, #4
 800098e:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 8000990:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <LCD_INIT+0x178>)
 8000992:	2201      	movs	r2, #1
 8000994:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 8000996:	4925      	ldr	r1, [pc, #148]	; (8000a2c <LCD_INIT+0x178>)
 8000998:	4825      	ldr	r0, [pc, #148]	; (8000a30 <LCD_INIT+0x17c>)
 800099a:	f7ff fd21 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN4;
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <LCD_INIT+0x178>)
 80009a0:	2210      	movs	r2, #16
 80009a2:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <LCD_INIT+0x178>)
 80009a6:	2204      	movs	r2, #4
 80009a8:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <LCD_INIT+0x178>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 80009b0:	491e      	ldr	r1, [pc, #120]	; (8000a2c <LCD_INIT+0x178>)
 80009b2:	481f      	ldr	r0, [pc, #124]	; (8000a30 <LCD_INIT+0x17c>)
 80009b4:	f7ff fd14 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN5;
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <LCD_INIT+0x178>)
 80009ba:	2220      	movs	r2, #32
 80009bc:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <LCD_INIT+0x178>)
 80009c0:	2204      	movs	r2, #4
 80009c2:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <LCD_INIT+0x178>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 80009ca:	4918      	ldr	r1, [pc, #96]	; (8000a2c <LCD_INIT+0x178>)
 80009cc:	4818      	ldr	r0, [pc, #96]	; (8000a30 <LCD_INIT+0x17c>)
 80009ce:	f7ff fd07 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN6;
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <LCD_INIT+0x178>)
 80009d4:	2240      	movs	r2, #64	; 0x40
 80009d6:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <LCD_INIT+0x178>)
 80009da:	2204      	movs	r2, #4
 80009dc:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <LCD_INIT+0x178>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 80009e4:	4911      	ldr	r1, [pc, #68]	; (8000a2c <LCD_INIT+0x178>)
 80009e6:	4812      	ldr	r0, [pc, #72]	; (8000a30 <LCD_INIT+0x17c>)
 80009e8:	f7ff fcfa 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN7;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <LCD_INIT+0x178>)
 80009ee:	2280      	movs	r2, #128	; 0x80
 80009f0:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <LCD_INIT+0x178>)
 80009f4:	2204      	movs	r2, #4
 80009f6:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <LCD_INIT+0x178>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 80009fe:	490b      	ldr	r1, [pc, #44]	; (8000a2c <LCD_INIT+0x178>)
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <LCD_INIT+0x17c>)
 8000a02:	f7ff fced 	bl	80003e0 <MCAL_GPIO_Init>

	_delay_ms(15);
 8000a06:	200f      	movs	r0, #15
 8000a08:	f7ff feec 	bl	80007e4 <_delay_ms>
	LCD_clear_screen();
 8000a0c:	f7ff ff06 	bl	800081c <LCD_clear_screen>

#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000a10:	2038      	movs	r0, #56	; 0x38
 8000a12:	f000 f8e3 	bl	8000bdc <LCD_WRITE_COMMAND>
	//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
#endif

	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000a16:	2006      	movs	r0, #6
 8000a18:	f000 f8e0 	bl	8000bdc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000a1c:	2080      	movs	r0, #128	; 0x80
 8000a1e:	f000 f8dd 	bl	8000bdc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000a22:	200f      	movs	r0, #15
 8000a24:	f000 f8da 	bl	8000bdc <LCD_WRITE_COMMAND>
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000021c 	.word	0x2000021c
 8000a30:	40010800 	.word	0x40010800

08000a34 <LCD_check_lcd_isbusy>:

void LCD_check_lcd_isbusy(){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

	config.PinNumber = GPIOx_PIN0;
 8000a38:	4b66      	ldr	r3, [pc, #408]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_Fl_in;
 8000a3e:	4b65      	ldr	r3, [pc, #404]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &config);
 8000a44:	4963      	ldr	r1, [pc, #396]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000a46:	4864      	ldr	r0, [pc, #400]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000a48:	f7ff fcca 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN1;
 8000a4c:	4b61      	ldr	r3, [pc, #388]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_Fl_in;
 8000a52:	4b60      	ldr	r3, [pc, #384]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &config);
 8000a58:	495e      	ldr	r1, [pc, #376]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000a5a:	485f      	ldr	r0, [pc, #380]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000a5c:	f7ff fcc0 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN2;
 8000a60:	4b5c      	ldr	r3, [pc, #368]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000a62:	2204      	movs	r2, #4
 8000a64:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_Fl_in;;
 8000a66:	4b5b      	ldr	r3, [pc, #364]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &config);
 8000a6c:	4959      	ldr	r1, [pc, #356]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000a6e:	485a      	ldr	r0, [pc, #360]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000a70:	f7ff fcb6 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN3;
 8000a74:	4b57      	ldr	r3, [pc, #348]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000a76:	2208      	movs	r2, #8
 8000a78:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_Fl_in;
 8000a7a:	4b56      	ldr	r3, [pc, #344]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &config);
 8000a80:	4954      	ldr	r1, [pc, #336]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000a82:	4855      	ldr	r0, [pc, #340]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000a84:	f7ff fcac 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN4;
 8000a88:	4b52      	ldr	r3, [pc, #328]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000a8a:	2210      	movs	r2, #16
 8000a8c:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_Fl_in;
 8000a8e:	4b51      	ldr	r3, [pc, #324]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &config);
 8000a94:	494f      	ldr	r1, [pc, #316]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000a96:	4850      	ldr	r0, [pc, #320]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000a98:	f7ff fca2 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN5;
 8000a9c:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_Fl_in;
 8000aa2:	4b4c      	ldr	r3, [pc, #304]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &config);
 8000aa8:	494a      	ldr	r1, [pc, #296]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000aaa:	484b      	ldr	r0, [pc, #300]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000aac:	f7ff fc98 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN6;
 8000ab0:	4b48      	ldr	r3, [pc, #288]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000ab2:	2240      	movs	r2, #64	; 0x40
 8000ab4:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 8000ab6:	4b47      	ldr	r3, [pc, #284]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000ab8:	2204      	movs	r2, #4
 8000aba:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &config);
 8000abc:	4945      	ldr	r1, [pc, #276]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000abe:	4846      	ldr	r0, [pc, #280]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000ac0:	f7ff fc8e 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN7;
 8000ac4:	4b43      	ldr	r3, [pc, #268]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_Fl_in;
 8000aca:	4b42      	ldr	r3, [pc, #264]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(GPIOA, &config);
 8000ad0:	4940      	ldr	r1, [pc, #256]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000ad2:	4841      	ldr	r0, [pc, #260]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000ad4:	f7ff fc84 	bl	80003e0 <MCAL_GPIO_Init>


	MCAL_GPIO_WritePin(GPIOA, RW_SWITCH , 1);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ade:	483e      	ldr	r0, [pc, #248]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000ae0:	f7ff fd2b 	bl	800053a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, RS_SWITCH , 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aea:	483b      	ldr	r0, [pc, #236]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000aec:	f7ff fd25 	bl	800053a <MCAL_GPIO_WritePin>

	LCD_lcd_kick();
 8000af0:	f7ff fea0 	bl	8000834 <LCD_lcd_kick>

	config.PinNumber = GPIOx_PIN0;
 8000af4:	4b37      	ldr	r3, [pc, #220]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 8000afa:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000afc:	2204      	movs	r2, #4
 8000afe:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 8000b00:	4b34      	ldr	r3, [pc, #208]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 8000b06:	4933      	ldr	r1, [pc, #204]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b08:	4833      	ldr	r0, [pc, #204]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000b0a:	f7ff fc69 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN1;
 8000b0e:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b10:	2202      	movs	r2, #2
 8000b12:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 8000b14:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b16:	2204      	movs	r2, #4
 8000b18:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 8000b1a:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 8000b20:	492c      	ldr	r1, [pc, #176]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b22:	482d      	ldr	r0, [pc, #180]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000b24:	f7ff fc5c 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN2;
 8000b28:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 8000b2e:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b30:	2204      	movs	r2, #4
 8000b32:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 8000b34:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 8000b3a:	4926      	ldr	r1, [pc, #152]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b3c:	4826      	ldr	r0, [pc, #152]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000b3e:	f7ff fc4f 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN3;
 8000b42:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b44:	2208      	movs	r2, #8
 8000b46:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 8000b48:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 8000b54:	491f      	ldr	r1, [pc, #124]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b56:	4820      	ldr	r0, [pc, #128]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000b58:	f7ff fc42 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN4;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b5e:	2210      	movs	r2, #16
 8000b60:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b64:	2204      	movs	r2, #4
 8000b66:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 8000b6e:	4919      	ldr	r1, [pc, #100]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b70:	4819      	ldr	r0, [pc, #100]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000b72:	f7ff fc35 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN5;
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b78:	2220      	movs	r2, #32
 8000b7a:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 8000b88:	4912      	ldr	r1, [pc, #72]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b8a:	4813      	ldr	r0, [pc, #76]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000b8c:	f7ff fc28 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN6;
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b92:	2240      	movs	r2, #64	; 0x40
 8000b94:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b98:	2204      	movs	r2, #4
 8000b9a:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 8000ba2:	490c      	ldr	r1, [pc, #48]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000ba6:	f7ff fc1b 	bl	80003e0 <MCAL_GPIO_Init>

	config.PinNumber = GPIOx_PIN7;
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000bac:	2280      	movs	r2, #128	; 0x80
 8000bae:	801a      	strh	r2, [r3, #0]
	config.MODE =  GPIO_MODE_out_PP;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	709a      	strb	r2, [r3, #2]
	config.OutPut_Speed = GPIO_Out_max_Speed_10_MHz;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, &config);
 8000bbc:	4905      	ldr	r1, [pc, #20]	; (8000bd4 <LCD_check_lcd_isbusy+0x1a0>)
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000bc0:	f7ff fc0e 	bl	80003e0 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOA, RW_SWITCH , 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bca:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <LCD_check_lcd_isbusy+0x1a4>)
 8000bcc:	f7ff fcb5 	bl	800053a <MCAL_GPIO_WritePin>

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000021c 	.word	0x2000021c
 8000bd8:	40010800 	.word	0x40010800

08000bdc <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 8000be6:	f7ff ff25 	bl	8000a34 <LCD_check_lcd_isbusy>
	MCAL_GPIO_WritePort(GPIOA,command);
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <LCD_WRITE_COMMAND+0x44>)
 8000bf2:	f7ff fcb9 	bl	8000568 <MCAL_GPIO_WritePort>

	MCAL_GPIO_WritePin(GPIOA, RS_SWITCH , 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfc:	4808      	ldr	r0, [pc, #32]	; (8000c20 <LCD_WRITE_COMMAND+0x44>)
 8000bfe:	f7ff fc9c 	bl	800053a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, RW_SWITCH , 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <LCD_WRITE_COMMAND+0x44>)
 8000c0a:	f7ff fc96 	bl	800053a <MCAL_GPIO_WritePin>

	_delay_ms(1);
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f7ff fde8 	bl	80007e4 <_delay_ms>
	LCD_lcd_kick();
 8000c14:	f7ff fe0e 	bl	8000834 <LCD_lcd_kick>
		LCD_lcd_kick ();
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif */
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40010800 	.word	0x40010800

08000c24 <check_position>:

void check_position (){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	curser++;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <check_position+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <check_position+0x40>)
 8000c30:	6013      	str	r3, [r2, #0]
	if (curser == 16)
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <check_position+0x40>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b10      	cmp	r3, #16
 8000c38:	d104      	bne.n	8000c44 <check_position+0x20>
	{
		LCD_GOTO_XY(2,0);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f7ff fe0f 	bl	8000860 <LCD_GOTO_XY>
		LCD_clear_screen();
		LCD_GOTO_XY(1,0);
		curser = 0;
	}

}
 8000c42:	e00c      	b.n	8000c5e <check_position+0x3a>
	else if (curser == 32)
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <check_position+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b20      	cmp	r3, #32
 8000c4a:	d108      	bne.n	8000c5e <check_position+0x3a>
		LCD_clear_screen();
 8000c4c:	f7ff fde6 	bl	800081c <LCD_clear_screen>
		LCD_GOTO_XY(1,0);
 8000c50:	2100      	movs	r1, #0
 8000c52:	2001      	movs	r0, #1
 8000c54:	f7ff fe04 	bl	8000860 <LCD_GOTO_XY>
		curser = 0;
 8000c58:	4b02      	ldr	r3, [pc, #8]	; (8000c64 <check_position+0x40>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000218 	.word	0x20000218

08000c68 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
 8000c72:	f7ff fedf 	bl	8000a34 <LCD_check_lcd_isbusy>

	MCAL_GPIO_WritePort(GPIOA,((uint8_t)character));
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480f      	ldr	r0, [pc, #60]	; (8000cbc <LCD_WRITE_CHAR+0x54>)
 8000c7e:	f7ff fc73 	bl	8000568 <MCAL_GPIO_WritePort>

	MCAL_GPIO_WritePin(GPIOA, RW_SWITCH , 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <LCD_WRITE_CHAR+0x54>)
 8000c8a:	f7ff fc56 	bl	800053a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, RS_SWITCH , 1);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c94:	4809      	ldr	r0, [pc, #36]	; (8000cbc <LCD_WRITE_CHAR+0x54>)
 8000c96:	f7ff fc50 	bl	800053a <MCAL_GPIO_WritePin>

	_delay_ms(1);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff fda2 	bl	80007e4 <_delay_ms>
	LCD_lcd_kick();
 8000ca0:	f7ff fdc8 	bl	8000834 <LCD_lcd_kick>
	_delay_ms(1);
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f7ff fd9d 	bl	80007e4 <_delay_ms>
	check_position();
 8000caa:	f7ff ffbb 	bl	8000c24 <check_position>
	_delay_ms(1);
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f7ff fd98 	bl	80007e4 <_delay_ms>
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
		LCD_lcd_kick ();
	#endif
	 */
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40010800 	.word	0x40010800

08000cc0 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	while (*string > 0) {
 8000cc8:	e006      	b.n	8000cd8 <LCD_WRITE_STRING+0x18>
		LCD_WRITE_CHAR(*string++);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	1c5a      	adds	r2, r3, #1
 8000cce:	607a      	str	r2, [r7, #4]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ffc8 	bl	8000c68 <LCD_WRITE_CHAR>
	while (*string > 0) {
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1f4      	bne.n	8000cca <LCD_WRITE_STRING+0xa>
	}
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <atoi>:
 8000ce8:	220a      	movs	r2, #10
 8000cea:	2100      	movs	r1, #0
 8000cec:	f000 b8ba 	b.w	8000e64 <strtol>

08000cf0 <__libc_init_array>:
 8000cf0:	b570      	push	{r4, r5, r6, lr}
 8000cf2:	2500      	movs	r5, #0
 8000cf4:	4e0c      	ldr	r6, [pc, #48]	; (8000d28 <__libc_init_array+0x38>)
 8000cf6:	4c0d      	ldr	r4, [pc, #52]	; (8000d2c <__libc_init_array+0x3c>)
 8000cf8:	1ba4      	subs	r4, r4, r6
 8000cfa:	10a4      	asrs	r4, r4, #2
 8000cfc:	42a5      	cmp	r5, r4
 8000cfe:	d109      	bne.n	8000d14 <__libc_init_array+0x24>
 8000d00:	f000 f926 	bl	8000f50 <_init>
 8000d04:	2500      	movs	r5, #0
 8000d06:	4e0a      	ldr	r6, [pc, #40]	; (8000d30 <__libc_init_array+0x40>)
 8000d08:	4c0a      	ldr	r4, [pc, #40]	; (8000d34 <__libc_init_array+0x44>)
 8000d0a:	1ba4      	subs	r4, r4, r6
 8000d0c:	10a4      	asrs	r4, r4, #2
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d105      	bne.n	8000d1e <__libc_init_array+0x2e>
 8000d12:	bd70      	pop	{r4, r5, r6, pc}
 8000d14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d18:	4798      	blx	r3
 8000d1a:	3501      	adds	r5, #1
 8000d1c:	e7ee      	b.n	8000cfc <__libc_init_array+0xc>
 8000d1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d22:	4798      	blx	r3
 8000d24:	3501      	adds	r5, #1
 8000d26:	e7f2      	b.n	8000d0e <__libc_init_array+0x1e>
 8000d28:	080010a8 	.word	0x080010a8
 8000d2c:	080010a8 	.word	0x080010a8
 8000d30:	080010a8 	.word	0x080010a8
 8000d34:	080010ac 	.word	0x080010ac

08000d38 <__itoa>:
 8000d38:	1e93      	subs	r3, r2, #2
 8000d3a:	2b22      	cmp	r3, #34	; 0x22
 8000d3c:	b510      	push	{r4, lr}
 8000d3e:	460c      	mov	r4, r1
 8000d40:	d904      	bls.n	8000d4c <__itoa+0x14>
 8000d42:	2300      	movs	r3, #0
 8000d44:	461c      	mov	r4, r3
 8000d46:	700b      	strb	r3, [r1, #0]
 8000d48:	4620      	mov	r0, r4
 8000d4a:	bd10      	pop	{r4, pc}
 8000d4c:	2a0a      	cmp	r2, #10
 8000d4e:	d109      	bne.n	8000d64 <__itoa+0x2c>
 8000d50:	2800      	cmp	r0, #0
 8000d52:	da07      	bge.n	8000d64 <__itoa+0x2c>
 8000d54:	232d      	movs	r3, #45	; 0x2d
 8000d56:	700b      	strb	r3, [r1, #0]
 8000d58:	2101      	movs	r1, #1
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	4421      	add	r1, r4
 8000d5e:	f000 f897 	bl	8000e90 <__utoa>
 8000d62:	e7f1      	b.n	8000d48 <__itoa+0x10>
 8000d64:	2100      	movs	r1, #0
 8000d66:	e7f9      	b.n	8000d5c <__itoa+0x24>

08000d68 <itoa>:
 8000d68:	f7ff bfe6 	b.w	8000d38 <__itoa>

08000d6c <_strtol_l.isra.0>:
 8000d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d70:	4680      	mov	r8, r0
 8000d72:	4689      	mov	r9, r1
 8000d74:	4692      	mov	sl, r2
 8000d76:	461e      	mov	r6, r3
 8000d78:	460f      	mov	r7, r1
 8000d7a:	463d      	mov	r5, r7
 8000d7c:	9808      	ldr	r0, [sp, #32]
 8000d7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000d82:	f000 f8c3 	bl	8000f0c <__locale_ctype_ptr_l>
 8000d86:	4420      	add	r0, r4
 8000d88:	7843      	ldrb	r3, [r0, #1]
 8000d8a:	f013 0308 	ands.w	r3, r3, #8
 8000d8e:	d132      	bne.n	8000df6 <_strtol_l.isra.0+0x8a>
 8000d90:	2c2d      	cmp	r4, #45	; 0x2d
 8000d92:	d132      	bne.n	8000dfa <_strtol_l.isra.0+0x8e>
 8000d94:	2201      	movs	r2, #1
 8000d96:	787c      	ldrb	r4, [r7, #1]
 8000d98:	1cbd      	adds	r5, r7, #2
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d05d      	beq.n	8000e5a <_strtol_l.isra.0+0xee>
 8000d9e:	2e10      	cmp	r6, #16
 8000da0:	d109      	bne.n	8000db6 <_strtol_l.isra.0+0x4a>
 8000da2:	2c30      	cmp	r4, #48	; 0x30
 8000da4:	d107      	bne.n	8000db6 <_strtol_l.isra.0+0x4a>
 8000da6:	782b      	ldrb	r3, [r5, #0]
 8000da8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8000dac:	2b58      	cmp	r3, #88	; 0x58
 8000dae:	d14f      	bne.n	8000e50 <_strtol_l.isra.0+0xe4>
 8000db0:	2610      	movs	r6, #16
 8000db2:	786c      	ldrb	r4, [r5, #1]
 8000db4:	3502      	adds	r5, #2
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	bf14      	ite	ne
 8000dba:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8000dbe:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8000dc2:	2700      	movs	r7, #0
 8000dc4:	fbb1 fcf6 	udiv	ip, r1, r6
 8000dc8:	4638      	mov	r0, r7
 8000dca:	fb06 1e1c 	mls	lr, r6, ip, r1
 8000dce:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8000dd2:	2b09      	cmp	r3, #9
 8000dd4:	d817      	bhi.n	8000e06 <_strtol_l.isra.0+0x9a>
 8000dd6:	461c      	mov	r4, r3
 8000dd8:	42a6      	cmp	r6, r4
 8000dda:	dd23      	ble.n	8000e24 <_strtol_l.isra.0+0xb8>
 8000ddc:	1c7b      	adds	r3, r7, #1
 8000dde:	d007      	beq.n	8000df0 <_strtol_l.isra.0+0x84>
 8000de0:	4584      	cmp	ip, r0
 8000de2:	d31c      	bcc.n	8000e1e <_strtol_l.isra.0+0xb2>
 8000de4:	d101      	bne.n	8000dea <_strtol_l.isra.0+0x7e>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	db19      	blt.n	8000e1e <_strtol_l.isra.0+0xb2>
 8000dea:	2701      	movs	r7, #1
 8000dec:	fb00 4006 	mla	r0, r0, r6, r4
 8000df0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000df4:	e7eb      	b.n	8000dce <_strtol_l.isra.0+0x62>
 8000df6:	462f      	mov	r7, r5
 8000df8:	e7bf      	b.n	8000d7a <_strtol_l.isra.0+0xe>
 8000dfa:	2c2b      	cmp	r4, #43	; 0x2b
 8000dfc:	bf04      	itt	eq
 8000dfe:	1cbd      	addeq	r5, r7, #2
 8000e00:	787c      	ldrbeq	r4, [r7, #1]
 8000e02:	461a      	mov	r2, r3
 8000e04:	e7c9      	b.n	8000d9a <_strtol_l.isra.0+0x2e>
 8000e06:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8000e0a:	2b19      	cmp	r3, #25
 8000e0c:	d801      	bhi.n	8000e12 <_strtol_l.isra.0+0xa6>
 8000e0e:	3c37      	subs	r4, #55	; 0x37
 8000e10:	e7e2      	b.n	8000dd8 <_strtol_l.isra.0+0x6c>
 8000e12:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8000e16:	2b19      	cmp	r3, #25
 8000e18:	d804      	bhi.n	8000e24 <_strtol_l.isra.0+0xb8>
 8000e1a:	3c57      	subs	r4, #87	; 0x57
 8000e1c:	e7dc      	b.n	8000dd8 <_strtol_l.isra.0+0x6c>
 8000e1e:	f04f 37ff 	mov.w	r7, #4294967295
 8000e22:	e7e5      	b.n	8000df0 <_strtol_l.isra.0+0x84>
 8000e24:	1c7b      	adds	r3, r7, #1
 8000e26:	d108      	bne.n	8000e3a <_strtol_l.isra.0+0xce>
 8000e28:	2322      	movs	r3, #34	; 0x22
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	f8c8 3000 	str.w	r3, [r8]
 8000e30:	f1ba 0f00 	cmp.w	sl, #0
 8000e34:	d107      	bne.n	8000e46 <_strtol_l.isra.0+0xda>
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	b102      	cbz	r2, 8000e3e <_strtol_l.isra.0+0xd2>
 8000e3c:	4240      	negs	r0, r0
 8000e3e:	f1ba 0f00 	cmp.w	sl, #0
 8000e42:	d0f8      	beq.n	8000e36 <_strtol_l.isra.0+0xca>
 8000e44:	b10f      	cbz	r7, 8000e4a <_strtol_l.isra.0+0xde>
 8000e46:	f105 39ff 	add.w	r9, r5, #4294967295
 8000e4a:	f8ca 9000 	str.w	r9, [sl]
 8000e4e:	e7f2      	b.n	8000e36 <_strtol_l.isra.0+0xca>
 8000e50:	2430      	movs	r4, #48	; 0x30
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d1af      	bne.n	8000db6 <_strtol_l.isra.0+0x4a>
 8000e56:	2608      	movs	r6, #8
 8000e58:	e7ad      	b.n	8000db6 <_strtol_l.isra.0+0x4a>
 8000e5a:	2c30      	cmp	r4, #48	; 0x30
 8000e5c:	d0a3      	beq.n	8000da6 <_strtol_l.isra.0+0x3a>
 8000e5e:	260a      	movs	r6, #10
 8000e60:	e7a9      	b.n	8000db6 <_strtol_l.isra.0+0x4a>
	...

08000e64 <strtol>:
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <strtol+0x24>)
 8000e66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000e68:	681c      	ldr	r4, [r3, #0]
 8000e6a:	4d08      	ldr	r5, [pc, #32]	; (8000e8c <strtol+0x28>)
 8000e6c:	6a23      	ldr	r3, [r4, #32]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	bf08      	it	eq
 8000e72:	462b      	moveq	r3, r5
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	4613      	mov	r3, r2
 8000e78:	460a      	mov	r2, r1
 8000e7a:	4601      	mov	r1, r0
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	f7ff ff75 	bl	8000d6c <_strtol_l.isra.0>
 8000e82:	b003      	add	sp, #12
 8000e84:	bd30      	pop	{r4, r5, pc}
 8000e86:	bf00      	nop
 8000e88:	2000002c 	.word	0x2000002c
 8000e8c:	20000090 	.word	0x20000090

08000e90 <__utoa>:
 8000e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e92:	b08b      	sub	sp, #44	; 0x2c
 8000e94:	4605      	mov	r5, r0
 8000e96:	460c      	mov	r4, r1
 8000e98:	466e      	mov	r6, sp
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <__utoa+0x78>)
 8000e9c:	f103 0c20 	add.w	ip, r3, #32
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	6818      	ldr	r0, [r3, #0]
 8000ea4:	6859      	ldr	r1, [r3, #4]
 8000ea6:	3308      	adds	r3, #8
 8000ea8:	c703      	stmia	r7!, {r0, r1}
 8000eaa:	4563      	cmp	r3, ip
 8000eac:	463e      	mov	r6, r7
 8000eae:	d1f7      	bne.n	8000ea0 <__utoa+0x10>
 8000eb0:	6818      	ldr	r0, [r3, #0]
 8000eb2:	791b      	ldrb	r3, [r3, #4]
 8000eb4:	6038      	str	r0, [r7, #0]
 8000eb6:	713b      	strb	r3, [r7, #4]
 8000eb8:	1e93      	subs	r3, r2, #2
 8000eba:	2b22      	cmp	r3, #34	; 0x22
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	d904      	bls.n	8000ecc <__utoa+0x3c>
 8000ec2:	7023      	strb	r3, [r4, #0]
 8000ec4:	461c      	mov	r4, r3
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	b00b      	add	sp, #44	; 0x2c
 8000eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ecc:	1e66      	subs	r6, r4, #1
 8000ece:	fbb5 f0f2 	udiv	r0, r5, r2
 8000ed2:	fb02 5510 	mls	r5, r2, r0, r5
 8000ed6:	af0a      	add	r7, sp, #40	; 0x28
 8000ed8:	443d      	add	r5, r7
 8000eda:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8000ede:	1c59      	adds	r1, r3, #1
 8000ee0:	f806 5f01 	strb.w	r5, [r6, #1]!
 8000ee4:	4605      	mov	r5, r0
 8000ee6:	b968      	cbnz	r0, 8000f04 <__utoa+0x74>
 8000ee8:	4622      	mov	r2, r4
 8000eea:	5460      	strb	r0, [r4, r1]
 8000eec:	4423      	add	r3, r4
 8000eee:	1b19      	subs	r1, r3, r4
 8000ef0:	1b10      	subs	r0, r2, r4
 8000ef2:	4281      	cmp	r1, r0
 8000ef4:	dde7      	ble.n	8000ec6 <__utoa+0x36>
 8000ef6:	7811      	ldrb	r1, [r2, #0]
 8000ef8:	7818      	ldrb	r0, [r3, #0]
 8000efa:	f802 0b01 	strb.w	r0, [r2], #1
 8000efe:	f803 1901 	strb.w	r1, [r3], #-1
 8000f02:	e7f4      	b.n	8000eee <__utoa+0x5e>
 8000f04:	460b      	mov	r3, r1
 8000f06:	e7e2      	b.n	8000ece <__utoa+0x3e>
 8000f08:	08000f78 	.word	0x08000f78

08000f0c <__locale_ctype_ptr_l>:
 8000f0c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8000f10:	4770      	bx	lr

08000f12 <__ascii_mbtowc>:
 8000f12:	b082      	sub	sp, #8
 8000f14:	b901      	cbnz	r1, 8000f18 <__ascii_mbtowc+0x6>
 8000f16:	a901      	add	r1, sp, #4
 8000f18:	b142      	cbz	r2, 8000f2c <__ascii_mbtowc+0x1a>
 8000f1a:	b14b      	cbz	r3, 8000f30 <__ascii_mbtowc+0x1e>
 8000f1c:	7813      	ldrb	r3, [r2, #0]
 8000f1e:	600b      	str	r3, [r1, #0]
 8000f20:	7812      	ldrb	r2, [r2, #0]
 8000f22:	1c10      	adds	r0, r2, #0
 8000f24:	bf18      	it	ne
 8000f26:	2001      	movne	r0, #1
 8000f28:	b002      	add	sp, #8
 8000f2a:	4770      	bx	lr
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e7fb      	b.n	8000f28 <__ascii_mbtowc+0x16>
 8000f30:	f06f 0001 	mvn.w	r0, #1
 8000f34:	e7f8      	b.n	8000f28 <__ascii_mbtowc+0x16>

08000f36 <__ascii_wctomb>:
 8000f36:	b149      	cbz	r1, 8000f4c <__ascii_wctomb+0x16>
 8000f38:	2aff      	cmp	r2, #255	; 0xff
 8000f3a:	bf8b      	itete	hi
 8000f3c:	238a      	movhi	r3, #138	; 0x8a
 8000f3e:	700a      	strbls	r2, [r1, #0]
 8000f40:	6003      	strhi	r3, [r0, #0]
 8000f42:	2001      	movls	r0, #1
 8000f44:	bf88      	it	hi
 8000f46:	f04f 30ff 	movhi.w	r0, #4294967295
 8000f4a:	4770      	bx	lr
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	4770      	bx	lr

08000f50 <_init>:
 8000f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f52:	bf00      	nop
 8000f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f56:	bc08      	pop	{r3}
 8000f58:	469e      	mov	lr, r3
 8000f5a:	4770      	bx	lr

08000f5c <_fini>:
 8000f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5e:	bf00      	nop
 8000f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f62:	bc08      	pop	{r3}
 8000f64:	469e      	mov	lr, r3
 8000f66:	4770      	bx	lr
