
7-segmant.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000e0  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067d  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bb  00000000  00000000  00000871  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000282  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032f  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000de  00000000  00000000  00001413  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  7a:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <init>:

static unsigned char seven_segment[] = {0b0000,0b0001,0b0010,0b0011,0b0100,0b0101,0b0110,0b0111,0b1000,0b1001};

void init ()
{
	DDRC |= 0xFF;
  82:	84 b3       	in	r24, 0x14	; 20
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	84 bb       	out	0x14, r24	; 20
  88:	08 95       	ret

0000008a <main>:

int main(void)
{
	//int flag = 0;
	int i;
	init ();
  8a:	0e 94 41 00 	call	0x82	; 0x82 <init>
  8e:	4a e6       	ldi	r20, 0x6A	; 106
  90:	50 e0       	ldi	r21, 0x00	; 0
  92:	e0 e6       	ldi	r30, 0x60	; 96
  94:	f0 e0       	ldi	r31, 0x00	; 0
	
	while(1){
		
		for (i = 0 ;i < 10 ; i++){
			RESET_BIT(PORTC,0b1111,4);
  96:	85 b3       	in	r24, 0x15	; 21
  98:	8f 70       	andi	r24, 0x0F	; 15
  9a:	85 bb       	out	0x15, r24	; 21
			SET_BIT(PORTC,seven_segment[i],4);
  9c:	25 b3       	in	r18, 0x15	; 21
  9e:	91 91       	ld	r25, Z+
  a0:	30 e1       	ldi	r19, 0x10	; 16
  a2:	93 9f       	mul	r25, r19
  a4:	c0 01       	movw	r24, r0
  a6:	11 24       	eor	r1, r1
  a8:	82 2b       	or	r24, r18
  aa:	85 bb       	out	0x15, r24	; 21
			SET_BIT(PORTC,1,3);
  ac:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	91 ee       	ldi	r25, 0xE1	; 225
  b2:	24 e0       	ldi	r18, 0x04	; 4
  b4:	81 50       	subi	r24, 0x01	; 1
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	20 40       	sbci	r18, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x2a>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x34>
  be:	00 00       	nop
			_delay_ms(200);
			SET_BIT(PORTC,1,2);
  c0:	aa 9a       	sbi	0x15, 2	; 21
  c2:	3f ef       	ldi	r19, 0xFF	; 255
  c4:	81 ee       	ldi	r24, 0xE1	; 225
  c6:	94 e0       	ldi	r25, 0x04	; 4
  c8:	31 50       	subi	r19, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x3e>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x48>
  d2:	00 00       	nop
	int i;
	init ();
	
	while(1){
		
		for (i = 0 ;i < 10 ; i++){
  d4:	e4 17       	cp	r30, r20
  d6:	f5 07       	cpc	r31, r21
  d8:	f1 f6       	brne	.-68     	; 0x96 <main+0xc>
  da:	db cf       	rjmp	.-74     	; 0x92 <main+0x8>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
