
Uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  000002e8  0000037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000c0  008000c0  000003dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f5d  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f7  00000000  00000000  0000147d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f1  00000000  00000000  00001d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002568  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cb  00000000  00000000  0000274c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000725  00000000  00000000  00002c17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000333c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3c       	cpi	r26, 0xC0	; 192
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ec       	ldi	r26, 0xC0	; 192
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3c       	cpi	r26, 0xC5	; 197
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  8a:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_lcd_kick>:
	if (line == 2)
	{
		if (position < 16 && position >= 0)
		{
			curser = 16;
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
  92:	c3 9a       	sbi	0x18, 3	; 24
  94:	2f e7       	ldi	r18, 0x7F	; 127
  96:	88 e3       	ldi	r24, 0x38	; 56
  98:	91 e0       	ldi	r25, 0x01	; 1
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <LCD_lcd_kick+0x8>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <LCD_lcd_kick+0x12>
  a4:	00 00       	nop
  a6:	c3 98       	cbi	0x18, 3	; 24
  a8:	08 95       	ret

000000aa <LCD_WRITE_COMMAND>:
  aa:	cf 93       	push	r28
  ac:	c8 2f       	mov	r28, r24
  ae:	8b b3       	in	r24, 0x1b	; 27
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	9c 2f       	mov	r25, r28
  b4:	90 7f       	andi	r25, 0xF0	; 240
  b6:	89 2b       	or	r24, r25
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	88 b3       	in	r24, 0x18	; 24
  bc:	89 7f       	andi	r24, 0xF9	; 249
  be:	88 bb       	out	0x18, r24	; 24
  c0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
  c4:	8b b3       	in	r24, 0x1b	; 27
  c6:	28 2f       	mov	r18, r24
  c8:	2f 70       	andi	r18, 0x0F	; 15
  ca:	30 e1       	ldi	r19, 0x10	; 16
  cc:	c3 9f       	mul	r28, r19
  ce:	c0 01       	movw	r24, r0
  d0:	11 24       	eor	r1, r1
  d2:	82 2b       	or	r24, r18
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	89 7f       	andi	r24, 0xF9	; 249
  da:	88 bb       	out	0x18, r24	; 24
  dc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <LCD_clear_screen>:
  e4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__data_end+0x1>
  e8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__data_end>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_WRITE_COMMAND>
  f2:	08 95       	ret

000000f4 <LCD_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8f e3       	ldi	r24, 0x3F	; 63
  f6:	9c e9       	ldi	r25, 0x9C	; 156
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_INIT+0x4>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_INIT+0xa>
  fe:	00 00       	nop



void LCD_INIT(){
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 100:	87 b3       	in	r24, 0x17	; 23
 102:	8e 60       	ori	r24, 0x0E	; 14
 104:	87 bb       	out	0x17, r24	; 23
	//important Note: be Configure at main based on GPIO Driver .
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 106:	88 b3       	in	r24, 0x18	; 24
 108:	81 7f       	andi	r24, 0xF1	; 241
 10a:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	8a bb       	out	0x1a, r24	; 26
 110:	8f e2       	ldi	r24, 0x2F	; 47
 112:	95 e7       	ldi	r25, 0x75	; 117
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_INIT+0x20>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_INIT+0x26>
 11a:	00 00       	nop
	//important Note: be Configure at main based on GPIO Driver.
	_delay_ms(15);
	LCD_clear_screen();
 11c:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_clear_screen>
	//LCD_WRITE_COMMAND(0x02);		        /* send for 4 bit initialization of LCD  */
	//LCD_WRITE_COMMAND(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
	//LCD_WRITE_COMMAND(0x0c);              /* Display on cursor off*/
	//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
	//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 126:	88 e2       	ldi	r24, 0x28	; 40
 128:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_WRITE_COMMAND>
	#endif
	
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 138:	8f e0       	ldi	r24, 0x0F	; 15
 13a:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_WRITE_COMMAND>
 13e:	08 95       	ret

00000140 <check_position>:




void check_position (){
	curser++;
 140:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_end>
 144:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__data_end+0x1>
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__data_end+0x1>
 14e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__data_end>
	if (curser == 16)
 152:	80 31       	cpi	r24, 0x10	; 16
 154:	91 05       	cpc	r25, r1
 156:	21 f4       	brne	.+8      	; 0x160 <check_position+0x20>
	if (line == 2)
	{
		if (position < 16 && position >= 0)
		{
			curser = 16;
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 158:	80 ec       	ldi	r24, 0xC0	; 192
 15a:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_WRITE_COMMAND>
 15e:	08 95       	ret
	curser++;
	if (curser == 16)
	{
		LCD_GOTO_XY(2,0);
	}
	else if (curser == 32)
 160:	80 97       	sbiw	r24, 0x20	; 32
 162:	49 f4       	brne	.+18     	; 0x176 <check_position+0x36>
	{
		LCD_clear_screen();
 164:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_clear_screen>
void LCD_GOTO_XY(unsigned char line, unsigned char position){
	if (line == 1)
	{
		if (position < 16 && position >= 0)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 168:	80 e8       	ldi	r24, 0x80	; 128
 16a:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_WRITE_COMMAND>
	}
	else if (curser == 32)
	{
		LCD_clear_screen();
		LCD_GOTO_XY(1,0);
		curser = 0;
 16e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__data_end+0x1>
 172:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__data_end>
 176:	08 95       	ret

00000178 <LCD_WRITE_CHAR>:
}




void LCD_WRITE_CHAR(unsigned char character){
 178:	cf 93       	push	r28
 17a:	c8 2f       	mov	r28, r24
	check_position();
	_delay_ms(250);
	#endif
	#ifdef FOUR_BIT_MODE
	//LCD_check_lcd_isbusy();
	LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
 17c:	8b b3       	in	r24, 0x1b	; 27
 17e:	8f 70       	andi	r24, 0x0F	; 15
 180:	9c 2f       	mov	r25, r28
 182:	90 7f       	andi	r25, 0xF0	; 240
 184:	89 2b       	or	r24, r25
 186:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 188:	c1 9a       	sbi	0x18, 1	; 24
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 18a:	c2 98       	cbi	0x18, 2	; 24
	LCD_lcd_kick();
 18c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
 190:	8b b3       	in	r24, 0x1b	; 27
 192:	28 2f       	mov	r18, r24
 194:	2f 70       	andi	r18, 0x0F	; 15
 196:	30 e1       	ldi	r19, 0x10	; 16
 198:	c3 9f       	mul	r28, r19
 19a:	c0 01       	movw	r24, r0
 19c:	11 24       	eor	r1, r1
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 1a2:	c1 9a       	sbi	0x18, 1	; 24
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 1a4:	c2 98       	cbi	0x18, 2	; 24
 1a6:	8f e1       	ldi	r24, 0x1F	; 31
 1a8:	9e e4       	ldi	r25, 0x4E	; 78
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_WRITE_CHAR+0x32>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_WRITE_CHAR+0x38>
 1b0:	00 00       	nop
	_delay_ms(10);
	LCD_lcd_kick ();
 1b2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
 1b6:	8f e1       	ldi	r24, 0x1F	; 31
 1b8:	9e e4       	ldi	r25, 0x4E	; 78
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCD_WRITE_CHAR+0x42>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCD_WRITE_CHAR+0x48>
 1c0:	00 00       	nop
	_delay_ms(10);
	check_position();
 1c2:	0e 94 a0 00 	call	0x140	; 0x140 <check_position>
 1c6:	8f e1       	ldi	r24, 0x1F	; 31
 1c8:	9e e4       	ldi	r25, 0x4E	; 78
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_WRITE_CHAR+0x52>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_WRITE_CHAR+0x58>
 1d0:	00 00       	nop
	_delay_ms(10);
	#endif
}
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <LCD_WRITE_STRING>:




void LCD_WRITE_STRING(char* string){
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	ec 01       	movw	r28, r24
	while (*string > 0) {
 1dc:	88 81       	ld	r24, Y
 1de:	88 23       	and	r24, r24
 1e0:	31 f0       	breq	.+12     	; 0x1ee <LCD_WRITE_STRING+0x18>
 1e2:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 1e4:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_WRITE_CHAR>




void LCD_WRITE_STRING(char* string){
	while (*string > 0) {
 1e8:	89 91       	ld	r24, Y+
 1ea:	81 11       	cpse	r24, r1
 1ec:	fb cf       	rjmp	.-10     	; 0x1e4 <LCD_WRITE_STRING+0xe>
		LCD_WRITE_CHAR(*string++);
	}
}
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:

//=======================================//

int main(void)
{	
	LCD_INIT();
 1f4:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_INIT>
	
    MCAL_UART_Init();
 1f8:	0e 94 38 01 	call	0x270	; 0x270 <MCAL_UART_Init>
 1fc:	2f e7       	ldi	r18, 0x7F	; 127
 1fe:	88 e3       	ldi	r24, 0x38	; 56
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	21 50       	subi	r18, 0x01	; 1
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <main+0xe>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0x18>
 20c:	00 00       	nop

	_delay_ms(50);
	
	LCD_WRITE_STRING("READY");
 20e:	82 e9       	ldi	r24, 0x92	; 146
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_WRITE_STRING>
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	80 e7       	ldi	r24, 0x70	; 112
 21a:	92 e0       	ldi	r25, 0x02	; 2
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0x28>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0x32>
 226:	00 00       	nop
	_delay_ms(100);
	LCD_clear_screen();
 228:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_clear_screen>
	
	MCAL_UART_SendString("READY For Receiving Data\r");
 22c:	88 e9       	ldi	r24, 0x98	; 152
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 46 01 	call	0x28c	; 0x28c <MCAL_UART_SendString>
	MCAL_UART_SendString("Enter Data: \r");
 234:	82 eb       	ldi	r24, 0xB2	; 178
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 46 01 	call	0x28c	; 0x28c <MCAL_UART_SendString>
	
	
    while (1) 
    {
		p = MCAL_UART_ReceiveString();
 23c:	0e 94 55 01 	call	0x2aa	; 0x2aa <MCAL_UART_ReceiveString>
 240:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <p+0x1>
 244:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <p>
		LCD_WRITE_STRING(p);
 248:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_WRITE_STRING>
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	81 ee       	ldi	r24, 0xE1	; 225
 250:	94 e0       	ldi	r25, 0x04	; 4
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0x5e>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x68>
 25c:	00 00       	nop
		_delay_ms(200);
		LCD_clear_screen();
 25e:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_clear_screen>
 262:	8f e3       	ldi	r24, 0x3F	; 63
 264:	9c e9       	ldi	r25, 0x9C	; 156
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <main+0x72>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0x78>
 26c:	00 00       	nop
 26e:	e6 cf       	rjmp	.-52     	; 0x23c <main+0x48>

00000270 <MCAL_UART_Init>:

uint8_t MCAL_UART_Receive (){
	
	while(!READ_BIT(UCSRA,1,RXC));
	return UDR;
}
 270:	59 98       	cbi	0x0b, 1	; 11
 272:	88 e1       	ldi	r24, 0x18	; 24
 274:	8a b9       	out	0x0a, r24	; 10
 276:	86 e8       	ldi	r24, 0x86	; 134
 278:	80 bd       	out	0x20, r24	; 32
 27a:	10 bc       	out	0x20, r1	; 32
 27c:	83 e3       	ldi	r24, 0x33	; 51
 27e:	89 b9       	out	0x09, r24	; 9
 280:	78 94       	sei
 282:	08 95       	ret

00000284 <MCAL_UART_Send>:
 284:	5d 9b       	sbis	0x0b, 5	; 11
 286:	fe cf       	rjmp	.-4      	; 0x284 <MCAL_UART_Send>
 288:	8c b9       	out	0x0c, r24	; 12
 28a:	08 95       	ret

0000028c <MCAL_UART_SendString>:

void MCAL_UART_SendString(char *data){
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	ec 01       	movw	r28, r24
	
	 while(*data){
 292:	88 81       	ld	r24, Y
 294:	88 23       	and	r24, r24
 296:	31 f0       	breq	.+12     	; 0x2a4 <MCAL_UART_SendString+0x18>
 298:	21 96       	adiw	r28, 0x01	; 1
		MCAL_UART_Send(*data++);
 29a:	0e 94 42 01 	call	0x284	; 0x284 <MCAL_UART_Send>
	return UDR;
}

void MCAL_UART_SendString(char *data){
	
	 while(*data){
 29e:	89 91       	ld	r24, Y+
 2a0:	81 11       	cpse	r24, r1
 2a2:	fb cf       	rjmp	.-10     	; 0x29a <MCAL_UART_SendString+0xe>
		MCAL_UART_Send(*data++);
	 }
	 
}
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <MCAL_UART_ReceiveString>:

char* MCAL_UART_ReceiveString(){
	
	while(!READ_BIT(UCSRA,1,RXC));
 2aa:	5f 9b       	sbis	0x0b, 7	; 11
 2ac:	fe cf       	rjmp	.-4      	; 0x2aa <MCAL_UART_ReceiveString>

	R_Buffer = UDR;
 2ae:	9c b1       	in	r25, 0x0c	; 12
	
	if (R_Buffer == '\r'){
 2b0:	9d 30       	cpi	r25, 0x0D	; 13
 2b2:	59 f4       	brne	.+22     	; 0x2ca <MCAL_UART_ReceiveString+0x20>
		R_Data[R_count] = '\0';
 2b4:	e0 91 c4 00 	lds	r30, 0x00C4	; 0x8000c4 <R_count>
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	e0 5a       	subi	r30, 0xA0	; 160
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	10 82       	st	Z, r1
		R_count = 0;
 2c0:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <R_count>
		return R_Data;
 2c4:	80 e6       	ldi	r24, 0x60	; 96
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	08 95       	ret
	}
	else
	{
	R_Data[R_count] = R_Buffer;
 2ca:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <R_count>
 2ce:	e8 2f       	mov	r30, r24
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	e0 5a       	subi	r30, 0xA0	; 160
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	90 83       	st	Z, r25
	R_count++;
 2d8:	8f 5f       	subi	r24, 0xFF	; 255
 2da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <R_count>
	}	
	
	return ' ';
 2de:	80 e2       	ldi	r24, 0x20	; 32
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	08 95       	ret

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>
