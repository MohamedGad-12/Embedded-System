
I2C_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069f  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005df  00000000  00000000  0000085b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026d  00000000  00000000  00000e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000303  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000057  00000000  00000000  00001413  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_Set_Address>:

#define  ACK   1 

void I2C_Set_Address(unsigned char Address)
{
	TWAR = Address;
  6c:	82 b9       	out	0x02, r24	; 2
  6e:	08 95       	ret

00000070 <I2C_Read>:
}

unsigned char I2C_Read(){
	
	  // Own SLA+R has been received, ACK has been returned
	  TWCR= (1<<TWINT)|(ACK<<TWEA)|(1<<TWEN);
  70:	84 ec       	ldi	r24, 0xC4	; 196
  72:	86 bf       	out	0x36, r24	; 54
	  while(!(TWCR & (1<<TWINT))); 
  74:	06 b6       	in	r0, 0x36	; 54
  76:	07 fe       	sbrs	r0, 7
  78:	fd cf       	rjmp	.-6      	; 0x74 <I2C_Read+0x4>
	 //Data byte in TWDR has been transmitted, ACK has been received
	 //TWCR= (1<<TWINT)|(ACK<<TWEA)|(1<<TWEN);
	 //while(!(TWCR & (1<<TWINT)));
	 //while((TWSR)!= 0xB8);
	  
	  return TWDR;
  7a:	83 b1       	in	r24, 0x03	; 3
}
  7c:	08 95       	ret

0000007e <I2C_Write>:


void I2C_Write(unsigned char Data)
{
	TWDR = Data;
  7e:	83 b9       	out	0x03, r24	; 3
	TWCR= (1<<TWINT)|(1<<TWEN);
  80:	84 e8       	ldi	r24, 0x84	; 132
  82:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
  84:	06 b6       	in	r0, 0x36	; 54
  86:	07 fe       	sbrs	r0, 7
  88:	fd cf       	rjmp	.-6      	; 0x84 <I2C_Write+0x6>
  8a:	08 95       	ret

0000008c <main>:
#include "I2C.h"

int main(void)
{
	unsigned char Data = 0; 
	I2C_Set_Address(0b11010000);
  8c:	80 ed       	ldi	r24, 0xD0	; 208
  8e:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_Set_Address>
#include <util/delay.h>
#include "I2C.h"

int main(void)
{
	unsigned char Data = 0; 
  92:	c0 e0       	ldi	r28, 0x00	; 0
	I2C_Set_Address(0b11010000);
    while (1) 
    {
		I2C_Read();
  94:	0e 94 38 00 	call	0x70	; 0x70 <I2C_Read>
		I2C_Write(Data++);
  98:	d1 e0       	ldi	r29, 0x01	; 1
  9a:	dc 0f       	add	r29, r28
  9c:	8c 2f       	mov	r24, r28
  9e:	0e 94 3f 00 	call	0x7e	; 0x7e <I2C_Write>
  a2:	cd 2f       	mov	r28, r29
  a4:	f7 cf       	rjmp	.-18     	; 0x94 <main+0x8>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
