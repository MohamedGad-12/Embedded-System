
I2C_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076f  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000650  00000000  00000000  0000097b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b3  00000000  00000000  00000fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001380  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000363  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000094  00000000  00000000  0000176b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000017ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_init>:


void I2C_init()
{
	  // SCL freq= F_CPU/(16+2(TWBR).4^TWPS)     //MIN=0 , MAX=400KHZ  
	  TWBR=0x01;                               // Bit rate
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	80 b9       	out	0x00, r24	; 0
	  TWSR=(0<<TWPS1)|(0<<TWPS0);             // Setting Prescaler bits
  70:	11 b8       	out	0x01, r1	; 1
  72:	08 95       	ret

00000074 <I2C_Start>:


void I2C_Start(void)
{
	    // Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
	    TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  74:	84 ea       	ldi	r24, 0xA4	; 164
  76:	86 bf       	out	0x36, r24	; 54
	    while(!(TWCR & (1<<TWINT)));          // Wait till start condition is transmitted
  78:	06 b6       	in	r0, 0x36	; 54
  7a:	07 fe       	sbrs	r0, 7
  7c:	fd cf       	rjmp	.-6      	; 0x78 <I2C_Start+0x4>
	    while( (TWSR) != 0x08);               // start condition has been transmitted
  7e:	81 b1       	in	r24, 0x01	; 1
  80:	88 30       	cpi	r24, 0x08	; 8
  82:	e9 f7       	brne	.-6      	; 0x7e <I2C_Start+0xa>
}
  84:	08 95       	ret

00000086 <I2C_Write>:


void I2C_Write(unsigned char  D_Byte)
{
	 TWDR=D_Byte;                     // put data in TWDR
  86:	83 b9       	out	0x03, r24	; 3
	 TWCR=(1<<TWINT)|(1<<TWEN);      // Clear TWI interrupt flag,Enable TWI
  88:	84 e8       	ldi	r24, 0x84	; 132
  8a:	86 bf       	out	0x36, r24	; 54
	 while((TWCR & 0x80) == 0); 
  8c:	06 b6       	in	r0, 0x36	; 54
  8e:	07 fe       	sbrs	r0, 7
  90:	fd cf       	rjmp	.-6      	; 0x8c <I2C_Write+0x6>
}
  92:	08 95       	ret

00000094 <I2C_Read>:

unsigned char I2C_Read()
{               
	TWCR=(1<<TWINT)|(1<<TWEN) | (ACK<<TWEA);      // Clear TWI interrupt flag,Enable TWI
  94:	84 ec       	ldi	r24, 0xC4	; 196
  96:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80) == 0);
  98:	06 b6       	in	r0, 0x36	; 54
  9a:	07 fe       	sbrs	r0, 7
  9c:	fd cf       	rjmp	.-6      	; 0x98 <I2C_Read+0x4>
	return TWDR; 
  9e:	83 b1       	in	r24, 0x03	; 3
}
  a0:	08 95       	ret

000000a2 <I2C_Stop>:


void I2C_Stop()
{
	TWCR= (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
  a2:	84 e9       	ldi	r24, 0x94	; 148
  a4:	86 bf       	out	0x36, r24	; 54
  a6:	08 95       	ret

000000a8 <main>:
#include <util/delay.h>
#include "I2C.h"

int main(void)
{
	DDRA = 0XFF;                      //OutPut
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a bb       	out	0x1a, r24	; 26
    unsigned char Data = 0;
	I2C_init();
  ac:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	89 e6       	ldi	r24, 0x69	; 105
  b4:	98 e1       	ldi	r25, 0x18	; 24
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0xe>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x18>
  c0:	00 00       	nop
    while (1) 
    {
		_delay_ms(1000);
		I2C_Start();
  c2:	0e 94 3a 00 	call	0x74	; 0x74 <I2C_Start>
		I2C_Write(0b11010000+1);     //SLA+R
  c6:	81 ed       	ldi	r24, 0xD1	; 209
  c8:	0e 94 43 00 	call	0x86	; 0x86 <I2C_Write>
		while( (TWSR) != 0x40);      // SLA+R has been transmitted, ACK has been received
  cc:	81 b1       	in	r24, 0x01	; 1
  ce:	80 34       	cpi	r24, 0x40	; 64
  d0:	e9 f7       	brne	.-6      	; 0xcc <main+0x24>
		Data = I2C_Read();
  d2:	0e 94 4a 00 	call	0x94	; 0x94 <I2C_Read>
  d6:	c8 2f       	mov	r28, r24
		while( (TWSR) != 0x50);      // Data byte has been received,ACK has been returned
  d8:	81 b1       	in	r24, 0x01	; 1
  da:	80 35       	cpi	r24, 0x50	; 80
  dc:	e9 f7       	brne	.-6      	; 0xd8 <main+0x30>
		I2C_Stop();
  de:	0e 94 51 00 	call	0xa2	; 0xa2 <I2C_Stop>
		PORTA = Data;
  e2:	cb bb       	out	0x1b, r28	; 27
    }
  e4:	e5 cf       	rjmp	.-54     	; 0xb0 <main+0x8>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
